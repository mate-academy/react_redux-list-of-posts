/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// eslint-disable-next-line import/no-cycle
import { RootState } from '../../app/store';
import { getPostComments, createComment, deleteComment } from './commentsAPI';
import { Comment, CommentData } from '../../types/Comment';

export interface CommentsState {
  value: Comment[];
  status: 'items' | 'loading' | 'hasError';
}

const initialState: CommentsState = {
  value: [],
  status: 'loading',
};

export const loadComments = createAsyncThunk(
  'comments/getPostComments',
  async (postId: number) => {
    const value = await getPostComments(postId);

    // The value we return becomes the `fulfilled` action payload
    return value;
  },
);

export const addComment = createAsyncThunk(
  'comments/createComment',
  async (comment: CommentData) => {
    const value = await createComment(comment);

    // The value we return becomes the `fulfilled` action payload
    return value;
  },
);

export const removeComment = createAsyncThunk(
  'comments/removeComment',
  async (commentId: number) => {
    await deleteComment(commentId);

    // The value we return becomes the `fulfilled` action payload
    return commentId;
  },
);

export const commentsSlice = createSlice({
  name: 'comments',
  initialState,
  reducers: {
    clear: (state) => {
      state.value = [];
    },
    setComments: (state, action) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadComments.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadComments.fulfilled, (state, action) => {
        state.status = 'items';
        state.value = action.payload;
      })
      .addCase(loadComments.rejected, (state) => {
        state.status = 'hasError';
      })
      .addCase(addComment.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addComment.fulfilled, (state, action) => {
        state.status = 'items';
        state.value = [...state.value, action.payload];
      })
      .addCase(addComment.rejected, (state) => {
        state.status = 'hasError';
      })
      .addCase(removeComment.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(removeComment.fulfilled, (state) => {
        state.status = 'items';
      })
      .addCase(removeComment.rejected, (state) => {
        state.status = 'hasError';
      });
  },
});

export const { clear, setComments } = commentsSlice.actions;
export const selectComments = (state: RootState) => state.comments.value;

export default commentsSlice.reducer;
