/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// eslint-disable-next-line import/no-cycle
import { RootState } from '../../app/store';
import { getUserPosts } from './postsAPI';
import { Post } from '../../types/Post';

export interface PostsState {
  value: Post[];
  status: 'items' | 'loading' | 'hasError';
}

const initialState: PostsState = {
  value: [],
  status: 'loading',
};

export const loadPosts = createAsyncThunk(
  'posts/getUserPosts',
  async (userId: number) => {
    const value = await getUserPosts(userId);

    // The value we return becomes the `fulfilled` action payload
    return value;
  },
);

export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    clear: (state) => {
      state.value = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadPosts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadPosts.fulfilled, (state, action) => {
        state.status = 'items';
        state.value = action.payload;
      })
      .addCase(loadPosts.rejected, (state) => {
        state.status = 'hasError';
      });
  },
});

export const { clear } = postsSlice.actions;
export const selectPosts = (state: RootState) => state.posts.value;

export default postsSlice.reducer;
