/* eslint-disable import/no-cycle */
/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { Post } from '../types/Post';
import { getUserPosts } from '../api/posts';
import { RootState } from './store';

export interface PostState {
  postList: Post[] | [],
  selectedPost: null | Post,
  loaded: boolean,
  hasError: boolean,
}

const initialState: PostState = {
  postList: [],
  selectedPost: null,
  loaded: false,
  hasError: false,
};

export const fetchUserPosts = createAsyncThunk(
  '/posts',
  async (userId: number) => {
    const value = await getUserPosts(userId);

    return value;
  },
);

export const postUsersSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    clearUser: (state) => {
      state.postList = [];
    },

    onPostSelected: (state, action) => {
      state.selectedPost = action.payload;

      return state;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserPosts.pending, (state) => {
        state.loaded = false;
      })
      .addCase(fetchUserPosts.fulfilled, (state, action) => {
        state.loaded = true;
        state.postList = action.payload;
      })
      .addCase(fetchUserPosts.rejected, (state) => {
        state.loaded = true;
        state.hasError = true;
      });
  },
});

export const { clearUser, onPostSelected } = postUsersSlice.actions;

export const loadPosts = (state: RootState) => state;
