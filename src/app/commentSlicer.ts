/* eslint-disable import/no-cycle */
/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from './store';
import { getPostComments } from '../api/comments';
import { Comment } from '../types/Comment';

export interface CommentState {
  comments: Comment[],
  visible: boolean,
  loaded: boolean,
  hasError: boolean,
}

const initialState: CommentState = {
  comments: [],
  visible: false,
  loaded: false,
  hasError: false,
};

export const fetchUsersComments = createAsyncThunk(
  '/comments',
  async (userId: number) => {
    const value = await getPostComments(userId);

    return value;
  },
);

export const commentsUserSlice = createSlice({
  name: 'comments',
  initialState,
  reducers: {
    setFormVisible: (state, action) => {
      state.visible = action.payload;
    },
    addUserComment: (state, action) => {
      const currentComments = state.comments;

      state.comments = [...currentComments, action.payload];
    },
    deleteUserComment: (state, action) => {
      const currentComments = state.comments;

      state.comments = currentComments.filter(
        comment => comment.id !== action.payload,
      );
    },
    setError: (state) => {
      state.hasError = true;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsersComments.pending, (state) => {
        state.visible = false;
        state.loaded = false;
      })
      .addCase(fetchUsersComments.fulfilled, (state, action) => {
        state.loaded = true;

        state.comments = action.payload;
      })
      .addCase(fetchUsersComments.rejected, (state) => {
        state.loaded = true;
        state.hasError = true;
      });
  },
});

export const {
  setFormVisible,
  addUserComment,
  deleteUserComment,
  setError,
} = commentsUserSlice.actions;

export const loadComments = (state: RootState) => state;
