{"version":3,"sources":["store/posts.js","store/loading.js","store/search.js","store/index.js","Post.js","User.js","Comments.js","PostsPage.js","PostList/PostList.js","api/api.js","PostList/index.js","App.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","filter","post","id","map","Object","objectSpread2","comments","comment","isLoadingReducer","isLoading","setQueryReducer","search","query","getIsLoading","state","getPosts","getQuery","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","connect","delPost","_ref","postId","postContent","react_default","a","createElement","Fragment","className","onClick","title","body","User","person","address","name","email","street","delComment","postComments","src_User","PostList","src_Post","user","src_Comments","setPosts","setIsLoading","setQuery","mergeData","postsData","commentsData","usersData","find","userId","_ref2","_ref3","dataFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","then","response","json","sent","slicedToArray","stop","lib","debounceTimeout","placeholder","onChange","_ref5","target","value","trim","toLowerCase","PostsPage","_ref4","includes","App","src_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ab0716eb.chunk.js","sourcesContent":["const SET_POSTS = 'SET_POSTS';\nconst DEL_POST = 'DEL_POST';\nconst DEL_COMMENT = 'DEL_COMMENT';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\n\nexport const delPost = post => ({\n  type: DEL_POST,\n  post,\n});\n\nexport const delComment = (post, comment) => ({\n  type: DEL_COMMENT,\n  post,\n  comment,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DEL_POST:\n      return posts.filter(post => post.id !== action.post);\n    case DEL_COMMENT:\n      return posts.map(post => (\n        post.id === action.post\n          ? ({\n            ...post,\n            comments: post.comments.filter(\n              comment => comment.id !== action.comment\n            ),\n          })\n          : post\n      ));\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const SET_ISLOADING = 'SET_ISLOADING';\n\nexport const setIsLoading = isLoading => ({\n  type: SET_ISLOADING,\n  isLoading,\n});\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case SET_ISLOADING:\n      return action.isLoading;\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst setQueryReducer = (search = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return search;\n  }\n};\n\nexport default setQueryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport isLoadingReducer from './loading';\nimport postsReducer from './posts';\nimport setQueryReducer from './search';\n\nexport const getIsLoading = state => state.isLoading;\nexport const getPosts = state => state.posts;\nexport const getQuery = state => state.query;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: isLoadingReducer,\n  query: setQueryReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","/* eslint-disable no-shadow */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropsTypes from 'prop-types';\nimport { delPost } from './store/posts';\n\nconst Post = ({ postId, postContent, delPost }) => (\n  <>\n    <button\n      type=\"button\"\n      className=\"comment__delete\"\n      onClick={() => delPost(postId)}\n    >\n      X\n    </button>\n    <h1 className=\"post__title\">{postContent.title}</h1>\n    <p className=\"post__body\">{postContent.body}</p>\n  </>\n);\n\nPost.propTypes = {\n  postContent: PropsTypes.objectOf.isRequired,\n  postId: PropsTypes.number.isRequired,\n  delPost: PropsTypes.func.isRequired,\n};\n\nexport default connect(null, { delPost })(Post);\n","import React from 'react';\nimport PropsTypes from 'prop-types';\n\nconst User = ({ person, address }) => (\n  <div className=\"post__author\">\n    <p className=\"author__name\">\n      {person.name}\n    </p>\n    <p className=\"author__email\">\n      {person.email}\n    </p>\n    <address className=\"author__address\">\n      {address\n        ? person.address.street\n        : ''\n      }\n    </address>\n  </div>\n);\n\nUser.propTypes = {\n  person: PropsTypes.objectOf.isRequired,\n  address: PropsTypes.bool.isRequired,\n};\n\nexport default User;\n","/* eslint-disable no-shadow */\nimport React from 'react';\nimport PropsTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport User from './User';\nimport { delComment } from './store/posts';\n\nconst Comments = ({ postId, postComments, delComment }) => (\n  <div className=\"post__comments\">\n    {postComments.map(comment => (\n      <div className=\"comment\">\n        <button\n          type=\"button\"\n          className=\"comment__delete\"\n          onClick={() => delComment(postId, comment.id)}\n        >\n          X\n        </button>\n        <p>\n          {comment.body}\n        </p>\n        <User person={comment} />\n      </div>\n    ))}\n  </div>\n);\n\nComments.propTypes = {\n  postId: PropsTypes.number.isRequired,\n  postComments: PropsTypes.arrayOf.isRequired,\n  delComment: PropsTypes.func.isRequired,\n};\n\nexport default connect(null, { delComment })(Comments);\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport Post from './Post';\nimport User from './User';\nimport Comments from './Comments';\n\nconst PostList = ({ posts }) => (\n  posts.map(post => (\n    <section className=\"post\">\n      <Post\n        postId={post.id}\n        postContent={post}\n      />\n      <User\n        person={post.user}\n        address\n      />\n      <Comments\n        postId={post.id}\n        postComments={post.comments}\n      />\n    </section>\n  ))\n);\n\nPostList.propTypes = { posts: PropsTypes.arrayOf.isRequired };\n\nexport default PostList;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport { DebounceInput as Search } from 'react-debounce-input';\nimport {\n  getPostsFromServer,\n  getCommentsFromServer,\n  getUsersFromServer,\n} from '../api/api';\n\nimport PostsPage from '../PostsPage';\n\nconst PostList = ({\n  posts,\n  isLoading,\n  query,\n  setPosts,\n  setIsLoading,\n  setQuery,\n}) => {\n  const loadData = async() => {\n    setIsLoading(true);\n\n    const [postsData, commentsData, usersData] = await Promise.all(\n      [getPostsFromServer(), getCommentsFromServer(), getUsersFromServer()]\n    );\n\n    const dataFromServer = mergeData(postsData, commentsData, usersData);\n\n    setPosts(dataFromServer);\n\n    setIsLoading(false);\n  };\n\n  const mergeData = (postsData, commentsData, usersData) => postsData.map(\n    post => ({\n      ...post,\n      user: usersData.find(user => user.id === post.userId),\n      comments: commentsData.filter(comment => comment.postId === post.id),\n    })\n  );\n\n  const postSearch = () => posts.filter(\n    ({ title, body }) => (title + body).toLowerCase().includes(query),\n  );\n\n  if (isLoading) {\n    return <p className=\"loading\">Loading...</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!isLoading && posts.length !== 0\n        ? (\n          <>\n            <Search\n              className=\"search\"\n              type=\"search\"\n              debounceTimeout={500}\n              placeholder=\"search\"\n              onChange={({ target }) => {\n                setQuery(target.value.trim().toLowerCase());\n              }}\n            />\n            <PostsPage posts={postSearch()} />\n          </>\n        )\n        : (\n          <button\n            type=\"button\"\n            className=\"post__button\"\n            onClick={loadData}\n          >\n            Load\n          </button>\n        )\n      }\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropsTypes.arrayOf.isRequired,\n  isLoading: PropsTypes.bool.isRequired,\n  query: PropsTypes.string.isRequired,\n  setPosts: PropsTypes.func.isRequired,\n  setIsLoading: PropsTypes.func.isRequired,\n  setQuery: PropsTypes.func.isRequired,\n};\n\nexport default PostList;\n","const API_POSTS = 'https://jsonplaceholder.typicode.com/posts';\nconst API_COMMENTS = 'https://jsonplaceholder.typicode.com/comments';\nconst API_USERS = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getPostsFromServer = () => (\n  fetch(API_POSTS).then(response => response.json())\n);\n\nexport const getCommentsFromServer = () => (\n  fetch(API_COMMENTS).then(response => response.json())\n);\n\nexport const getUsersFromServer = () => (\n  fetch(API_USERS).then(response => response.json())\n);\n","import { connect } from 'react-redux';\nimport { setPosts } from '../store/posts';\nimport { setIsLoading } from '../store/loading';\nimport { setQuery } from '../store/search';\n\nimport { getPosts, getIsLoading, getQuery } from '../store/index';\n\nimport PostList from './PostList';\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  isLoading: getIsLoading(state),\n  query: getQuery(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    setPosts, setIsLoading, setQuery,\n  }\n)(PostList);\n","import React from 'react';\nimport './App.css';\n\nimport PostList from './PostList/index';\n\nconst App = () => (\n  <PostList />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}