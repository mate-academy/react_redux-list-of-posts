{"version":3,"sources":["api/index.js","store/index.js","components/Comment/Comment.js","components/CommentList/CommentsList.js","components/User/User.js","components/Post/Post.js","components/PostList/PostList.js","App.js","index.js"],"names":["getDataFromServer","data","fetch","concat","then","resolve","json","ACTION_TYPES","DELETE_POST","DELETE_COMMENT","FINISH_LOAD","START_LOAD","HAS_ERROR","finishLoad","posts","type","startLoad","errorOccur","initialState","isLoading","hasError","getPosts","state","store","createStore","arguments","length","undefined","action","_objectSpread","Object","toConsumableArray","map","item","comments","filter","comment","id","deleteId","deleleId","applyMiddleware","thunk","Comment","_ref","user","name","body","email","userName","react_default","a","createElement","className","title","onClick","_ref2","target","Number","defaultProps","connect","dispatch","deleteComment","CommentsList","components_Comment_Comment","key","User","_user$address","address","street","suite","city","deleteIdPost","deletePost","post","components_User_User","CommentList_CommentsList","components_Post_Post","loadData","Promise","all","_data","slicedToArray","users","postsWithcomments","find","person","userId","postId","catch","titleButton","classForButton","Fragment","disabled","components_PostList_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.156b25c4.chunk.js","sourcesContent":["const SOURCE_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getDataFromServer = data => (\n  fetch(`${SOURCE_URL}${data}`).then(resolve => resolve.json())\n);\n\nexport default getDataFromServer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport getDataFromServer from '../api';\n\nexport const loadDataFromServer = () => (dispatch) => {\n  dispatch(startLoad());\n  return Promise.all([\n    getDataFromServer('posts'),\n    getDataFromServer('users'),\n    getDataFromServer('comments'),\n  ]).then((data) => {\n    const [posts, users, comments] = data;\n\n    const postsWithcomments = [...posts].map(post => (\n      {\n        ...post,\n        user: users.find(person => person.id === post.userId),\n        comments: comments\n          .filter(comment => comment.postId === post.id)\n          .map(item => ({\n            ...item,\n            user: users.find(person => person.email === item.email),\n          })),\n      }\n    ));\n    dispatch(finishLoad(postsWithcomments));\n  }).catch(() => dispatch(errorOccur()));\n};\n\nexport const ACTION_TYPES = {\n  DELETE_POST: 'DELETE_POST',\n  DELETE_COMMENT: 'DELETE_COMMENT',\n  FINISH_LOAD: 'FINISH_LOAD',\n  START_LOAD: 'START_LOAD',\n  HAS_ERROR: 'HAS_ERROR',\n};\n\nconst finishLoad = posts => ({\n  type: ACTION_TYPES.FINISH_LOAD,\n  posts,\n});\n\nconst startLoad = () => ({\n  type: ACTION_TYPES.START_LOAD,\n});\n\nconst errorOccur = () => ({\n  type: ACTION_TYPES.HAS_ERROR,\n});\n\nconst initialState = {\n  posts: [],\n  isLoading: false,\n  hasError: false,\n};\n\nexport const deletePost = id => ({\n  type: ACTION_TYPES.DELETE_POST,\n  deleleId: id,\n});\n\nexport const deleteComment = id => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  deleteId: id,\n});\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.DELETE_COMMENT:\n      return ({\n        ...state,\n        posts: [\n          ...state.posts\n            .map(item => (\n              {\n                ...item,\n                comments: [\n                  ...item.comments\n                    .filter(comment => comment.id !== action.deleteId),\n                ],\n              })),\n        ],\n      });\n    case ACTION_TYPES.DELETE_POST:\n      return ({\n        ...state,\n        posts: [...state.posts.filter(item => item.id !== action.deleleId)],\n      });\n    case ACTION_TYPES.START_LOAD:\n      return ({\n        ...state,\n        isLoading: true,\n        hasError: false,\n      });\n    case ACTION_TYPES.FINISH_LOAD:\n      return ({\n        ...state,\n        posts: [...action.posts],\n        isLoading: false,\n      });\n    case ACTION_TYPES.HAS_ERROR:\n      return ({\n        hasError: true,\n        isLoading: false,\n      });\n    default:\n      return state;\n  }\n}\n\nexport const getPosts = state => state.posts;\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk)\n);\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from '../../store';\n\nfunction Comment({ comment, user, deleteId }) {\n  const {\n    name,\n    body,\n    email,\n    id,\n  } = comment;\n  const userName = user.name;\n\n  return (\n    <li className=\"list-group-item list-group-item-info comment\">\n      <p className=\"list-group-item list-group-item-info comment__head\">\n        <button\n          id={id}\n          type=\"button\"\n          className=\"btn btn-danger btn-sm btn-del\"\n          title=\"Delete comment\"\n          onClick={({ target }) => deleteId(Number(target.id))}\n        >\n          x\n        </button>\n        {name}\n      </p>\n      <p className=\"list-group-item list-group-item-info comment__body\">\n        {body}\n      </p>\n      <p className=\"list-group-item list-group-item-info comment__user-info\">\n        {`user: ${userName} (${email})`}\n      </p>\n    </li>\n  );\n}\n\nComment.defaultProps = {\n  user: {\n    name: 'Guest',\n  },\n};\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  }).isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  deleteId: PropTypes.func.isRequired,\n};\n\nconst getMethod = dispatch => ({\n  deleteId: id => dispatch(deleteComment(id)),\n});\n\nexport default connect(\n  null,\n  getMethod,\n)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\n\nconst CommentsList = ({ comments }) => (\n  comments.map(\n    item => <Comment comment={item} user={item.user} key={item.id} />\n  )\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  })).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const { name, email } = user;\n  const { street, suite, city } = user.address;\n\n  return (\n    <p className=\"list-group-item list-group-item-primary user-info\">\n      {\n        `User: ${name}, email: ${email} |\n        Adress: ${street}, ${suite}, ${city}`\n      }\n    </p>\n  );\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.shape({\n      street: PropTypes.string,\n      suite: PropTypes.string,\n      city: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport './Post.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentList from '../CommentList/CommentsList';\nimport User from '../User/User';\nimport { deletePost } from '../../store';\n\nfunction Post({ post, deleteIdPost }) {\n  const {\n    title,\n    body,\n    comments,\n    id,\n  } = post;\n\n  return (\n    <ul className=\"list-group post\">\n      <p className=\"list-group-item list-group-item-primary post__head\">\n        <button\n          id={id}\n          type=\"button\"\n          className=\"btn btn-danger btn-sm btn-del\"\n          title=\"Delete post\"\n          onClick={({ target }) => deleteIdPost(Number(target.id))}\n        >\n          x\n        </button>\n        {title}\n      </p>\n      <p className=\"list-group-item list-group-item-primary post__body\">\n        {body}\n      </p>\n      <User user={post.user} />\n      <CommentList comments={comments} />\n    </ul>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.shape({\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        city: PropTypes.string,\n      }),\n    }),\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      body: PropTypes.string,\n      email: PropTypes.string,\n      user: PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    })),\n  }).isRequired,\n  deleteIdPost: PropTypes.func.isRequired,\n};\n\nconst getMethod = dispatch => ({\n  deleteIdPost: id => dispatch(deletePost(id)),\n});\n\nexport default connect(\n  null,\n  getMethod\n)(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Post';\nimport { getPosts } from '../../store';\n\nconst PostList = ({ posts }) => (\n  posts.map(item => (\n    <Post post={item} key={item.id} />\n  ))\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.shape({\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        city: PropTypes.string,\n      }),\n    }),\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      body: PropTypes.string,\n      email: PropTypes.string,\n      user: PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    })),\n  })).isRequired,\n};\n\nconst getData = state => ({\n  posts: getPosts(state),\n});\n\nexport default connect(\n  getData,\n)(PostList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport PostList from './components/PostList/PostList';\nimport { loadDataFromServer } from './store';\n\nconst App = ({\n  posts,\n  isLoading,\n  hasError,\n  loadData,\n}) => {\n  const titleButton = (hasError ? 'Try again' : 'Load posts');\n  const classForButton = (\n    isLoading\n      ? 'btn btn-secondary'\n      : 'btn btn-primary'\n  );\n\n  return (\n    <div className=\"app\">\n      <h1>Static list of posts</h1>\n\n      {posts.length\n        ? (\n          <>\n            <span>posts: </span>\n            {posts.length}\n          </>\n        )\n        : (\n          <>\n            <p>No posts yet..</p>\n            {hasError\n              ? <p className=\"alert alert-danger\">Error occurred!</p>\n              : null\n            }\n            <button\n              type=\"button\"\n              className={classForButton}\n              onClick={loadData}\n              disabled={isLoading}\n            >\n              {isLoading\n                ? 'Loading...'\n                : titleButton\n              }\n            </button>\n          </>\n        )\n      }\n      <PostList />\n    </div>\n  );\n};\n\nconst getDataState = state => ({\n  posts: state.posts,\n  isLoading: state.isLoading,\n  hasError: state.hasError,\n});\n\nconst getMethod = dispatch => ({\n  loadData: () => dispatch(loadDataFromServer()),\n});\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  })).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  loadData: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  getDataState,\n  getMethod\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}