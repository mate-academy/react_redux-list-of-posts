{"version":3,"sources":["store.js","Comment.js","CommentList.js","User.js","Post.js","PostList.js","App.js","api/posts.js","api/users.js","api/comments.js","index.js"],"names":["isLoading","value","type","deletePost","id","deleteComment","initialState","postsWithUsers","store","createStore","state","arguments","length","undefined","action","Object","objectSpread2","posts","filter","post","map","comments","comment","applyMiddleware","thunk","connect","dispatch","deleteComments","_ref","react_default","a","createElement","className","name","body","email","onClick","CommentList","src_Comment","key","defaultProps","User","user","address","city","street","suite","zipcode","deletePosts","title","src_User","src_CommentList","PostList","src_Post","loadingData","_ref2","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","then","response","ok","json","catch","sent","slicedToArray","find","userId","postId","stop","_useState","useState","_useState2","searchItem","setSearchItem","postsToBeShown","toLowerCase","includes","Fragment","placeholder","onChange","src_PostList","disabled","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.86da1465.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { getComments } from './api/comments';\n\nconst LOADING = 'LOADING';\nconst LOADING_SUCCESS = 'LOADING_SUCCESS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst SET_POST = 'SET_POST';\n\nexport const isLoading = value => ({\n  type: LOADING, value,\n});\nexport const loadingSuccess = postsWithUsers => ({\n  type: LOADING_SUCCESS, postsWithUsers,\n});\nexport const setPost = posts => ({\n  type: SET_POST, posts,\n});\nexport const deletePost = id => ({\n  type: DELETE_POST, id,\n});\nexport const deleteComment = id => ({\n  type: DELETE_COMMENT, id,\n});\n\nexport const loadData = () => async(dispatch) => {\n  dispatch(isLoading(true));\n\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments(),\n  ]);\n\n  const postsWithUsers = (postsFromServer.map(\n    post => ({\n      ...post,\n      user: usersFromServer.find(user => user.id === post.userId),\n      comments: commentsFromServer\n        .filter(comment => comment.postId === post.id),\n    })\n  ));\n\n  dispatch(setPost(postsWithUsers));\n  dispatch(isLoading(false));\n};\n\nconst initialState = {\n  postsWithUsers: [],\n  isLoading: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOADING:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n\n    case LOADING_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n      };\n\n    case SET_POST:\n      return {\n        ...state,\n        postsWithUsers: action.posts,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        postsWithUsers: state.postsWithUsers\n          .filter(post => post.id !== action.id),\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        postsWithUsers: state.postsWithUsers.map(post => ({\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.id),\n        })),\n\n      };\n    default:\n      return state;\n  }\n};\n\n// const rootReducer = combineReducers({\n//   postsWithUsers: postsReducer,\n//   isLoading: loadingReducer,\n//   loadingSuccess: loadingSuccessReducer,\n// });\n\nconst store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from './store';\n/*eslint-disable */\nconst Comment = ({ comment, deleteComments }) => (\n/* eslint-enable */\n  <div className=\"all\">\n    <ul className=\"comment\">\n      <li className=\"comment__name\">{comment.name}</li>\n      <li className=\"comment__body\">{comment.body}</li>\n      <li className=\"comment__email\">{comment.email}</li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"comment__delete\"\n      onClick={() => deleteComments(comment.id)}\n    >\n        Remove\n    </button>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n  deleteComments: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteComments: id => dispatch(deleteComment(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/*eslint-disable */\nimport Comment from './Comment';\n/* eslint-enable */\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments-list\">\n\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nCommentList.propTypes\n  = { comments: PropTypes.arrayOf(PropTypes.object) };\nCommentList.defaultProps = { comments: [{}] };\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <ul className=\"user\">\n    <li className=\"user__name\">\nAuthor:\n      {user.name}\n    </li>\n    <li className=\"user__email\">\nEmail:\n      {user.email}\n    </li>\n    <li className=\"user__address\">\nAddress:\n      {' '}\n      {user.address.city}\n,\n      {' '}\n      {user.address.street}\n,\n      {' '}\n      {user.address.suite}\n,\n      {' '}\n      {user.address.zipcode}\n    </li>\n  </ul>\n);\n\nUser.propTypes = { user: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentList from './CommentList';\nimport User from './User';\nimport { deletePost } from './store';\n\nconst Post = ({ post, deletePosts }) => (\n  <div className=\"all\">\n    <ul className=\"post\">\n      <li className=\"post__title\">\n        {' '}\n        {'🖋'}\n        {' '}\n        {' ' }\n        {post.title}\n      </li>\n      <button\n        type=\"button\"\n        className=\"post__delete\"\n        onClick={() => deletePosts(post.id)}\n      >\n        Remove\n      </button>\n      <li className=\"post__body\">{post.body}</li>\n      <User user={post.user} />\n      <CommentList comments={post.comments} />\n    </ul>\n  </div>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    body: PropTypes.string,\n    user: PropTypes.object,\n    comments: PropTypes.array,\n  }).isRequired,\n  deletePosts: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deletePosts: id => dispatch(deletePost(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(post => <Post post={post} key={post.id} />)}\n  </div>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default PostList;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { loadData, deletePost, deleteComment } from './store';\nimport './App.css';\nimport PostList from './PostList';\n\nfunction App({ postsWithUsers, isLoading, loadingData }) {\n  const [searchItem, setSearchItem] = useState('');\n\n  const loading = () => {\n    loadingData();\n  };\n\n  const handleChangeItem = () => {\n    setSearchItem(searchItem.toLowerCase());\n  };\n\n  const filteredItems = () => (postsWithUsers\n    .filter(post => (post.title + post.body)\n      .toLowerCase().includes(searchItem)));\n\n  const postsToBeShown = searchItem ? filteredItems() : postsWithUsers;\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">React/Redux List of Posts</h1>\n      {postsWithUsers.length > 0 ? (\n        <>\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={handleChangeItem}\n          />\n          <PostList posts={postsToBeShown} />\n        </>\n      ) : (\n        <button\n          className=\"button\"\n          type=\"button\"\n          disabled={isLoading}\n          onClick={() => loading()}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  postsWithUsers: state.postsWithUsers,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadingData: () => dispatch(loadData()),\n  deletePost: id => dispatch(deletePost(id)),\n  deleteComment: id => dispatch(deleteComment(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  postsWithUsers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadingData: PropTypes.func.isRequired,\n};\n","const postsUrl = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPosts = () => fetch(postsUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsers = () => fetch(usersUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getComments = () => fetch(commentsUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}