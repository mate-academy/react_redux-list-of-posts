{"version":3,"sources":["ArrsAPI.js","LoadingReducer.js","PostsReducer.js","store.js","Comment.js","CommentList.js","User.js","Post.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["getPostsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsers","_context2","getComments","_context3","loadingState","isLoading","loaded","error","loadingReducer","state","arguments","length","undefined","action","type","Object","objectSpread2","value","postsState","posts","filteredPosts","postsReducer","filter","post","id","map","postId","comments","comment","commentId","getPosts","getLoading","getLoaded","getError","getFilteredPosts","rootReducer","combineReducers","loading","store","createStore","connect","dispatch","deleteComment","postFunctions","_ref","react_default","createElement","className","onClick","name","body","email","CommentList","currentComment","Comment","User","user","Fragment","concat","address","city","street","suite","deletePost","title","src_User","src_CommentList","modifyPosts","_ref2","users","Promise","all","slicedToArray","currentUser","find","userId","userComment","functions","setPosts","changeLoading","loadingFunctions","changeLoaded","changeError","setFilterPosts","_ref3","_useState","useState","_useState2","input","setInput","loadPosts","postsFromServer","t0","debouncedInputHandler","_","debounce","searchQuery","toLowerCase","trim","filtered","includes","postsToShow","htmlFor","onChange","inputEvent","target","src_Post","key","App","src_PostList","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4c69e34.chunk.js","sourcesContent":["const URLposts = 'https://jsonplaceholder.typicode.com/posts';\nconst URLusers = 'https://jsonplaceholder.typicode.com/users';\nconst URLcomments = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getPostsFromServer = async() => {\n  const response = await fetch(URLposts);\n\n  return response.json();\n};\n\nexport const getUsers = async() => {\n  const response = await fetch(URLusers);\n\n  return response.json();\n};\n\nexport const getComments = async() => {\n  const response = await fetch(URLcomments);\n\n  return response.json();\n};\n","const TYPE_CHANGE_LOADING = 'CHANGE_LOADING';\nconst TYPE_CHANGE_LOADED = 'CHANGE_LOADED';\nconst TYPE_CHANGE_ERROR = 'CHANGE_ERROR';\n\nexport const changeLoading = value => ({\n  type: TYPE_CHANGE_LOADING, value,\n});\nexport const changeLoaded = value => ({\n  type: TYPE_CHANGE_LOADED, value,\n});\nexport const changeError = value => ({\n  type: TYPE_CHANGE_ERROR, value,\n});\n\nconst loadingState = {\n  isLoading: false,\n  loaded: false,\n  error: false,\n};\n\nconst loadingReducer = (state = loadingState, action) => {\n  switch (action.type) {\n    case TYPE_CHANGE_LOADING:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n    case TYPE_CHANGE_LOADED:\n      return {\n        ...state,\n        loaded: action.value,\n      };\n    case TYPE_CHANGE_ERROR:\n      return {\n        ...state,\n        error: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","const TYPE_SET_POSTS = 'SET_POSTS';\nconst TYPE_DELETE_POST = 'DELETE_POST';\nconst TYPE_DELETE_COMMENT = 'DELETE_COMMENT';\nconst TYPE_FILTER_POSTS = 'FILTER_POSTS';\n\nexport const setPosts = value => ({\n  type: TYPE_SET_POSTS, value,\n});\nexport const setFilterPosts = value => ({\n  type: TYPE_FILTER_POSTS, value,\n});\nexport const deletePost = value => ({\n  type: TYPE_DELETE_POST, value,\n});\nexport const deleteComment = (postId, commentId) => ({\n  type: TYPE_DELETE_COMMENT, postId, commentId,\n});\n\nconst postsState = {\n  posts: [],\n  filteredPosts: [],\n};\n\nconst postsReducer = (state = postsState, action) => {\n  switch (action.type) {\n    case TYPE_SET_POSTS:\n      return {\n        ...state,\n        posts: action.value,\n      };\n    case TYPE_DELETE_POST:\n      return {\n        ...state,\n        filteredPosts: state.filteredPosts\n          .filter(post => post.id !== action.value),\n        posts: state.posts\n          .filter(post => post.id !== action.value),\n      };\n\n    case TYPE_DELETE_COMMENT:\n      return {\n        ...state,\n        filteredPosts: state.filteredPosts\n          .map(post => (post.id === action.postId\n            ? {\n              ...post,\n              comments: post.comments\n                .filter(comment => comment.id !== action.commentId),\n            }\n            : post)),\n\n        posts: state.posts\n          .map(post => (post.id === action.postId\n            ? {\n              ...post,\n              comments: post.comments\n                .filter(comment => comment.id !== action.commentId),\n            }\n            : post)),\n      };\n    case TYPE_FILTER_POSTS:\n      return {\n        ...state,\n        filteredPosts: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { createStore, combineReducers } from 'redux';\nimport loadingReducer from './LoadingReducer';\nimport postsReducer from './PostsReducer';\n\nexport const getPosts = state => state.posts;\nexport const getLoading = state => state.isLoading;\nexport const getLoaded = state => state.loaded;\nexport const getError = state => state.error;\nexport const getFilteredPosts = state => state.filteredPosts;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  loading: loadingReducer,\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as postFunctions from './PostsReducer';\n\nconst CurrComment = ({ comment, postId, deleteComment }) => (\n  <li>\n    <button\n      type=\"button\"\n      className=\"delete\"\n      onClick={() => deleteComment(postId, comment.id)}\n    >\n      x\n    </button>\n    <p className=\"comment\">{comment.name}</p>\n    <p className=\"comment\">{comment.body}</p>\n    <p className=\"comment\">{comment.email}</p>\n  </li>\n);\n\nconst getExtraMethods = dispatch => ({\n  deleteComment: (postId, commentId) => dispatch(\n    postFunctions.deleteComment(postId, commentId)\n  ),\n});\nconst getExtraData = state => ({});\n\nCurrComment.propTypes = {\n  deleteComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(getExtraData, getExtraMethods)(CurrComment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CurrComment from './Comment';\n\nconst CommentList = ({ comments, postId }) => (\n  comments.map(currentComment => (\n    <CurrComment\n      comment={currentComment}\n      postId={postId}\n    />\n  ))\n);\n\nCommentList.propTypes\n  = { comments: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <>\n    <p className=\"user\">{user.name}</p>\n    <p className=\"user\">{user.email}</p>\n    <p className=\"user\">\n      {`${user.address.city} ${user.address.street} ${user.address.suite}`}\n    </p>\n  </>\n);\n\nUser.propTypes\n  = { user: PropTypes.objectOf(PropTypes.string).isRequired };\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CommentList from './CommentList';\nimport User from './User';\nimport * as postFunctions from './PostsReducer';\n\nconst Post = ({ post, deletePost }) => (\n  <div className=\"post\">\n    <button\n      type=\"button\"\n      onClick={() => deletePost(post.id)}\n      className=\"delete\"\n    >\n      delete post\n    </button>\n    <p className=\"title\">{post.title}</p>\n    <p>{post.body}</p>\n    <div className=\"user\">\n      <User user={post.user} />\n    </div>\n    <ul>\n      <p className=\"title-comment\">Comments</p>\n      <CommentList comments={post.comments} postId={post.id} />\n    </ul>\n  </div>\n);\n\nconst getExtraMethods = dispatch => ({\n  deletePost: value => dispatch(\n    postFunctions.deletePost(value)\n  ),\n});\nconst getExtraData = state => ({});\n\nPost.propTypes = {\n  post: PropTypes.oneOfType([PropTypes.string,\n    PropTypes.number,\n  ])\n    .isRequired,\n};\n\nPost.propTypes = { deletePost: PropTypes.func.isRequired };\n\nexport default connect(getExtraData, getExtraMethods)(Post);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { getPostsFromServer, getUsers, getComments } from './ArrsAPI';\nimport * as functions from './store';\nimport Post from './Post';\nimport * as postFunctions from './PostsReducer';\nimport * as loadingFunctions from './LoadingReducer';\n\nconst modifyPosts = async() => {\n  const [posts, users, comments] = await Promise\n    .all([getPostsFromServer(), getUsers(), getComments()]);\n\n  return posts.map((post) => {\n    const currentUser = users.find(user => user.id === post.userId);\n    const userComment = comments\n      .filter(comment => comment.postId === post.id);\n\n    return {\n      ...post,\n      user: currentUser,\n      comments: userComment,\n    };\n  });\n};\n\nconst PostList = ({\n  setPosts,\n  changeLoading,\n  changeLoaded,\n  changeError,\n  posts,\n  isLoading,\n  loaded,\n  error,\n  setFilterPosts,\n  filteredPosts,\n}) => {\n  const [input, setInput] = useState('');\n\n  const loadPosts = async() => {\n    try {\n      changeLoading(true);\n\n      const postsFromServer = await modifyPosts();\n\n      setPosts(postsFromServer);\n      changeLoading(false);\n      changeLoaded(true);\n      changeError(false);\n    } catch (e) {\n      changeError(true);\n    }\n  };\n\n  const inputHandler = (value) => {\n    const searchQuery = value.toLowerCase().trim();\n\n    setInput(searchQuery);\n\n    let filtered = posts\n      .filter(post => post.title.includes(searchQuery)\n        || post.body.includes(searchQuery));\n\n    if (searchQuery.length === 0) {\n      filtered = [];\n    }\n    setFilterPosts(filtered);\n  };\n\n  const debouncedInputHandler = _.debounce(inputHandler, 500);\n\n  const postsToShow = input.length !== 0 ? filteredPosts : posts;\n\n  return (\n    <div>\n      {posts.length === 0 && !error && !isLoading\n        && (\n          <button\n            className=\"load\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            Load\n          </button>\n        )\n      }\n      {isLoading && !error && <div className=\"loading\">Loading...</div>}\n      {loaded && !isLoading && (\n        <div>\n          <label htmlFor=\"search\">\n            Search\n            <input\n              id=\"search\"\n              className=\"input\"\n              type=\"search\"\n              onChange={inputEvent => debouncedInputHandler(\n                inputEvent.target.value\n              )}\n            />\n          </label>\n          {postsToShow.map(post => (\n            <Post post={post} key={post.id} />\n          ))}\n        </div>\n      )}\n      {error && (\n        <div className=\"button_container\">\n          <p className=\"error\">Error occurred</p>\n          <button\n            className=\"load\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            Try again\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getExtraData = state => ({\n  posts: functions.getPosts(state.posts),\n  isLoading: functions.getLoading(state.loading),\n  loaded: functions.getLoaded(state.loading),\n  error: functions.getError(state.loading),\n  filteredPosts: functions.getFilteredPosts(state.posts),\n});\n\nconst getExtraMethods = dispatch => ({\n  setPosts: value => dispatch(\n    postFunctions.setPosts(value)\n  ),\n  changeLoading: value => dispatch(\n    loadingFunctions.changeLoading(value)\n  ),\n  changeLoaded: value => dispatch(\n    loadingFunctions.changeLoaded(value)\n  ),\n  changeError: value => dispatch(\n    loadingFunctions.changeError(value)\n  ),\n  setFilterPosts: value => dispatch(\n    postFunctions.setFilterPosts(value)\n  ),\n\n});\n\nPostList.propTypes = {\n  posts: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  changeLoading: PropTypes.func.isRequired,\n  changeLoaded: PropTypes.func.isRequired,\n  changeError: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.bool.isRequired,\n  setFilterPosts: PropTypes.func.isRequired,\n  filteredPosts: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n};\n\nexport default connect(getExtraData, getExtraMethods)(PostList);\n","import React from 'react';\nimport './App.css';\nimport PostList from './PostList';\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Dynamic list of posts</h1>\n    <PostList />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}