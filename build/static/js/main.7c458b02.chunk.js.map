{"version":3,"sources":["reducers/postsReducer.js","reducers/queryReducer.js","api/getUsers.js","api/getPosts.js","api/getComments.js","reducers/loadingReducer.js","store.js","User.js","Comment.js","CommentsList.js","Post.js","PostList.js","App.js","index.js"],"names":["postsReducer","posts","action","type","filter","post","id","postId","map","comments","comment","commentId","queryReducer","query","loadUsersFromServer","a","async","fetch","response","json","loadPostsFromServer","loadCommentsFromServer","loadingReducer","loading","getPosts","state","getIsLoading","isLoading","getQuery","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","User","userData","name","email","street","address","connect","deleteComment","commentData","className","onClick","body","CommentsList","commentsData","key","deletePost","data","title","user","length","PostList","info","mapMethodsToProps","load","dispatch","Promise","all","postsFromServer","commentsFromServer","usersFromServer","preparedPosts","find","person","userId","setQueryValue","filtredPosts","toLowerCase","includes","trim","value","onChange","e","target","debounceTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c458b02.chunk.js","sourcesContent":["export const SET_POSTS = 'SET_POSTS';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId,\n});\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(\n        post => post.id !== action.postId,\n      );\n    case DELETE_COMMENT:\n      return posts.map((post) => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter(\n              comment => comment.id !== action.commentId,\n            ),\n          };\n        }\n\n        return post;\n      });\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","export const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst queryReducer = (query = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const loadUsersFromServer = async() => {\n  const response = await fetch(USERS_URL);\n\n  return response.json();\n};\n","const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const loadPostsFromServer = async() => {\n  const response = await fetch(POSTS_URL);\n\n  return response.json();\n};\n","const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const loadCommentsFromServer = async() => {\n  const response = await fetch(COMMENTS_URL);\n\n  return response.json();\n};\n","export const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (loading = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case FINISH_LOADING:\n      return false;\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport postsReducer, { setPosts } from './reducers/postsReducer';\nimport queryReducer from './reducers/queryReducer';\nimport { loadUsersFromServer } from './api/getUsers';\nimport { loadPostsFromServer } from './api/getPosts';\nimport { loadCommentsFromServer } from './api/getComments';\nimport loadingReducer, {\n  startLoading,\n  finishLoading,\n} from './reducers/loadingReducer';\n\nexport const loadFromServer = () => async(dispatch) => {\n  dispatch(startLoading());\n\n  const [\n    postsFromServer,\n    commentsFromServer,\n    usersFromServer,\n  ] = await Promise.all([\n    loadPostsFromServer(),\n    loadCommentsFromServer(),\n    loadUsersFromServer(),\n  ]);\n\n  const preparedPosts = postsFromServer.map(post => ({\n    ...post,\n    user: usersFromServer.find(person => post.userId === person.id),\n    comments: commentsFromServer.filter(comment => comment.postId === post.id),\n  }));\n\n  dispatch(setPosts(preparedPosts));\n  dispatch(finishLoading());\n};\n\nexport const getPosts = state => state.posts;\nexport const getIsLoading = state => state.isLoading;\nexport const getQuery = state => state.query;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: loadingReducer,\n  query: queryReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line no-shadow\nconst User = ({ userData: { name, email, address: { street } } }) => (\n  <>\n    <span>{`By ${name}`}</span>\n    <span>{email}</span>\n    <span>{street}</span>\n  </>\n);\n\nUser.propTypes\n= { userData: PropTypes.oneOfType([PropTypes.object]).isRequired };\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from './reducers/postsReducer';\n\n// eslint-disable-next-line no-shadow\nconst Comment = ({ commentData, deleteComment }) => (\n  <>\n    <dt>\n      <button\n        type=\"button\"\n        className=\"delete delete-comment\"\n        onClick={() => deleteComment(commentData.postId, commentData.id)}\n      >\n        X\n      </button>\n      {commentData.name}\n      <br />\n      {commentData.email}\n    </dt>\n    <dd>{commentData.body}</dd>\n  </>\n);\n\nComment.propTypes = {\n  commentData: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { deleteComment })(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// eslint-disable-next-line no-shadow\nimport Comment from './Comment';\n\nconst CommentsList = ({ commentsData }) => (\n  <article className=\"comments\">\n    <dl>\n      { commentsData.map(comment => (\n        <Comment commentData={comment} key={comment.id} />\n      ))}\n    </dl>\n  </article>\n);\n\nCommentsList.propTypes\n= { commentsData: PropTypes.oneOfType([PropTypes.array]).isRequired };\n\nexport default CommentsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentsList from './CommentsList';\nimport { deletePost } from './reducers/postsReducer';\n\n// eslint-disable-next-line no-shadow\nconst Post = ({ data: { title, body, user, comments, id }, deletePost }) => (\n  <>\n    <h2>{title}</h2>\n    <button\n      type=\"button\"\n      className=\"delete delete-post\"\n      onClick={() => deletePost(id)}\n    >\n      X\n    </button>\n    <p>{body}</p>\n    <p className=\"author\">\n      <User userData={user} />\n    </p>\n    {comments.length\n      ? (\n        <>\n          <h3>Comments:</h3>\n          <CommentsList commentsData={comments} />\n        </>\n      )\n      : ''\n    }\n\n  </>\n);\n\nPost.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { deletePost })(Post);\n","import React from 'react';\nimport Post from './Post';\n\nconst PostList = ({ info }) => (\n  info.map(post => (\n    <section className=\"post shadow\" key={post.id}>\n      <Post data={post} />\n    </section>\n  ))\n);\n\nexport default PostList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DebounceInput as FilterInput } from 'react-debounce-input';\nimport PropTypes from 'prop-types';\nimport PostList from './PostList';\nimport { getPosts, getIsLoading, loadFromServer, getQuery } from './store';\nimport { setQuery } from './reducers/queryReducer';\n\nimport './App.css';\n\nconst App = ({\n  posts, isLoading, load, query, setQueryValue,\n}) => {\n  const filtredPosts = posts.filter(\n    ({ title, body }) => (\n      (title + body).toLowerCase().includes(query.trim())\n    ),\n  );\n\n  const handleInput = (e) => {\n    setQueryValue(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {posts.length\n        ? (\n          <>\n            <FilterInput\n              className=\"filter\"\n              type=\"text\"\n              value={query}\n              onChange={handleInput}\n              debounceTimeout={500}\n            />\n            <PostList info={filtredPosts} />\n          </>\n        )\n        : (<button type=\"button\" onClick={load}>Load data</button>)\n      }\n      {isLoading && <h3>Loading...</h3>}\n    </div>\n  );\n};\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  load: PropTypes.func.isRequired,\n  setQueryValue: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  isLoading: getIsLoading(state),\n  query: getQuery(state),\n});\n\nconst mapMethodsToProps = {\n  load: loadFromServer,\n  setQueryValue: setQuery,\n};\n\nexport default connect(mapStateToProps, mapMethodsToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}