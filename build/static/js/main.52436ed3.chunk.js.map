{"version":3,"sources":["store/isLoaded.js","store/loading.js","store/post.js","api/GetDataFromServer.js","store/index.js","Comment.js","Post.js","PostList.js","Main.js","App.js","index.js"],"names":["setIsLoaded","newSetIsLoaded","type","isLoaded","isLoadedReducer","arguments","length","undefined","action","setIsLoading","newSetLoading","loading","loadingReducer","setPost","newpost","post","postReducer","getDataFromServer","URL","fetch","then","dataList","json","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","removePost","connect","state","_ref","comment","react_default","a","createElement","className","name","email","body","onClick","map","postId","id","comments","filter","newComments","ownpost","Fragment","title","user","address","street","suite","city","zipcode","geo","lat","lng","src_Comment","key","PostList","posts","src_Post","setStateToStore","loadPosts","dispatch","_ref2","allUsers","allComments","allPosts","unitedPost","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","Object","slicedToArray","objectSpread2","find","userId","commentId","stop","_useState","useState","_useState2","textInput","setTextInput","filteredPost","includes","inputText","f","delay","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","placeholder","onChange","event","target","value","src_PostList","App","src_Main","ReactDOM","render","es","index","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.52436ed3.chunk.js","sourcesContent":["export const setIsLoaded = newSetIsLoaded => ({\n  type: 'CHANGE_IS_LOADED',\n  isLoaded: newSetIsLoaded,\n});\n\nconst isLoadedReducer = (isLoaded = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_IS_LOADED':\n      return  action.isLoaded;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default isLoadedReducer;\n","export const setIsLoading = newSetLoading => ({\n  type: 'CHANGE_LOADING',\n  loading: newSetLoading,\n});\n\nconst loadingReducer = (loading = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_LOADING':\n      return  action.loading;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","export const setPost = newpost => ({\n  type: 'CHANGE_POST',\n  post: newpost,\n});\n\nconst postReducer = (post = [], action) => {\n  switch(action.type) {\n    case 'CHANGE_POST':\n      return  action.post;\n\n    default:\n      return post;\n  }\n};\n\nexport default postReducer;\n","const getDataFromServer = URL => fetch(URL).then(dataList => dataList.json());\n\nexport default getDataFromServer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport isLoadedReducer, { setIsLoaded } from './isLoaded';\nimport loadingReducer, { setIsLoading } from './loading';\nimport postReducer, { setPost } from './post';\nimport getDataFromServer from '../api/GetDataFromServer';\nimport thunk from 'redux-thunk';\n\nexport const loadPosts = () => {\n  return async (dispatch) => {\n    dispatch(setIsLoading(true));\n    const [allUsers, allComments, allPosts]\n      = await Promise.all([\n    getDataFromServer('https://jsonplaceholder.typicode.com/users'),\n    getDataFromServer('https://jsonplaceholder.typicode.com/comments'),\n    getDataFromServer('https://jsonplaceholder.typicode.com/posts'),\n    ]);\n\n    dispatch(setIsLoading(true));\n    const unitedPost = allPosts.map(post => ({\n      ...post,\n      user: allUsers.find(user => user.id === post.userId),\n      comments: allComments.filter(commentId => commentId.postId === post.id),\n    }));\n\n    dispatch(setPost(unitedPost));\n    dispatch(setIsLoading(false));\n    dispatch(setIsLoaded(true));\n  };\n}\n\nconst rootReducer = combineReducers({\n  isLoaded: isLoadedReducer,\n  loading: loadingReducer,\n  post: postReducer,\n});\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as post from './store/post';\n\nconst Comment = ({ comment, post, setPost }) => {\n  const removeComment = () => {\n    setPost(post.map(post => {\n      if (comment.postId === post.id) {\n        post.comments = post.comments.filter(newComments => {\n          return newComments.id !== comment.id;\n        });\n      }\n      return post;\n    }));\n  }\n  return (\n  <div>\n    <h3 className=\"headers\">\n      {comment.name}\n    </h3>\n    <p>\n      {comment.email}\n    </p>\n    <p>\n      {comment.body}\n    </p>\n    <button type=\"button\" onClick={removeComment}>\n      Remove\n    </button>\n  </div>\n)};\n\nconst getPosts = (state) => ({\n  post: state.post,\n});\n\nconst removePost = {\n  setPost: post.setPost,\n}\n\nComment.propTypes = {\n  comment: PropTypes.objectOf(PropTypes.any).isRequired,\n  post: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPost: PropTypes.func.isRequired,\n};\n\nexport default connect(getPosts, removePost)(Comment);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\nimport {connect} from 'react-redux';\nimport * as post from './store/post';\n\n\nconst Post = ({ ownpost, post, setPost }) => {\n  const removePost = () => {\n    setPost(post.filter(post => post.id !== ownpost.id));\n  }\n\n  return (\n    <>\n      <button type=\"button\" className=\"remove_post\" onClick={removePost}>\n        Remove\n      </button>\n      <section className=\"post\">\n        <h1 className=\"post__title\">\n          {ownpost.title}\n        </h1>\n        <p className=\"post__text\">\n          {ownpost.body}\n        </p>\n      </section>\n      <section className=\"userSection\">\n        {ownpost.user.name}\n        <br />\n        {ownpost.user.email}\n        <br />\n        {ownpost.user.address.street}\n        {ownpost.user.address.suite}\n        {ownpost.user.address.city}\n        {ownpost.user.address.zipcode}\n        {ownpost.user.address.geo.lat}\n        {ownpost.user.address.geo.lng}\n      </section>\n      <section className=\"commentSection\">\n        {\n          ownpost.comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />))\n        }\n      </section>\n    </>\n  )};\n\nconst getPosts = (state) => ({\n  post: state.post,\n});\n\nconst removePost = {\n  setPost: post.setPost,\n}\n\nPost.propTypes = {\n  ownpost: PropTypes.objectOf(PropTypes.any).isRequired,\n  post: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPost: PropTypes.func.isRequired,\n};\n\nexport default connect(getPosts, removePost)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post-list\">\n    { posts.map(post => (\n      <div key={post.id} className=\"allPost\">\n        <Post ownpost={post} />\n      </div>\n    ))}\n  </section>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.any).isRequired };\n\nexport default PostList;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as isLoaded from './store/isLoaded';\nimport * as loading from './store/loading';\nimport * as post from './store/post';\nimport * as index from './store/index';\nimport PostList from './PostList';\n\nconst Main = ({ isLoaded, loading, post, loadPosts }) => {\n  const [textInput, setTextInput] = useState('');\n\n  const filteredPost = post.filter((post) => {\n    const postContent = post.title + post.body;\n\n    return postContent.includes(textInput);\n  });;\n\n  function debounce(f, delay) {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => f(...args), delay);\n    };\n  }\n\n  const inputText = debounce(setTextInput, 1000);\n\n  if (loading) {\n    return (\n      <p className=\"App\">...LOADING</p>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <section className=\"App\">\n        <button type=\"button\" onClick={loadPosts}>\n          Load\n        </button>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"App\">\n      <input\n        id=\"text\"\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={event => inputText(event.target.value)}\n      />\n      <p>\n        {filteredPost.length}\n        {' '}\n        posts found\n      </p>\n      <PostList posts={filteredPost} />\n    </section>\n  );\n};\n\nconst getStateFromStore = state => ({\n  isLoaded: state.isLoaded,\n  loading: state.loading,\n  post: state.post,\n})\n\nconst setStateToStore = {\n  setIsLoaded: isLoaded.setIsLoaded,\n  setIsLoading: loading.setIsLoading,\n  setPost: post.setPost,\n  loadPosts: index.loadPosts,\n};\n\nMain.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  setIsLoaded: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n}\n\nexport default connect(getStateFromStore, setStateToStore)(Main);\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nconst App = () => <Main />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport index from './store/index';\n\nReactDOM.render(\n  <Provider store={ index }><App /></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}