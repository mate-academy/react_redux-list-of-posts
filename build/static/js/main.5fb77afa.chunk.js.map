{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostHandler.js","components/PostList.js","components/PostListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD","POSTS_RECEIVED","USERS_RECEIVED","COMMENTS_RECEIVED","CHECK_DATA","REMOVE_POST","serverUrl","sendRequest","url","handler","dispatch","request","XMLHttpRequest","open","addEventListener","send","requestPostsHandler","posts","parsePosts","JSON","parse","responseText","type","checkData","requestUsersHandler","users","parseUsers","requestCommentsHandler","comments","parseComments","load","concat","loadData","initialState","postList","requested","User","props","name","email","address","react_default","a","createElement","className","suite","street","city","zipcode","Comment","title","body","CommentList","postCommentsDiv","postComments","map","comment","components_Comment","Object","assign","key","id","Post","user","onClick","postRemoveClicked","components_User","components_CommentList","PostHandler","connect","state","removePostId","removePost","PostList","postItems","post","components_PostHandler","disabled","buttonLoadClicked","PostListHandler","store","createStore","arguments","length","undefined","action","objectSpread","isLoading","find","userId","filter","postId","mapData","applyMiddleware","thunk","App","es","components_PostListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fb77afa.chunk.js","sourcesContent":["export const LOAD = 'load';\nexport const POSTS_RECEIVED = 'posts_received';\nexport const USERS_RECEIVED = 'users_received';\nexport const COMMENTS_RECEIVED = 'comments_received';\nexport const CHECK_DATA = 'check_data';\nexport const REMOVE_POST = 'remove_post';\n\n\nconst serverUrl = 'https://jsonplaceholder.typicode.com/';\n\nfunction loadData(dispatch) {\n  sendRequest(`${serverUrl}posts`, requestPostsHandler, dispatch);\n  sendRequest(`${serverUrl}users`, requestUsersHandler, dispatch);\n  sendRequest(`${serverUrl}comments`, requestCommentsHandler, dispatch);\n}\n\nfunction sendRequest(url, handler, dispatch) {\n  const request = new XMLHttpRequest();\n  request.open('GET', url);\n  request.addEventListener('load', handler(request, dispatch));\n  request.send();\n}\n\nconst requestPostsHandler = (request, dispatch) => () => {\n  const parsePosts = JSON.parse(request.responseText);\n  dispatch(postsReceived(parsePosts));\n}\n\nconst requestUsersHandler = (request, dispatch) => () => {\n  const parseUsers = JSON.parse(request.responseText);\n  dispatch(usersReceived(parseUsers));\n}\n\nconst requestCommentsHandler = (request, dispatch) => () => {\n  const parseComments = JSON.parse(request.responseText);\n  dispatch(commentsReceived(parseComments));\n}\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n        type: LOAD\n    });\n    loadData(dispatch);\n  };\n}\n\nexport function postsReceived(posts) {\n  return (dispatch) => {\n    dispatch({\n      type: POSTS_RECEIVED,\n      posts\n    });\n    dispatch(checkData());\n  }\n}\n\nexport function usersReceived(users) {\n  return (dispatch) => {\n    dispatch({\n      type: USERS_RECEIVED,\n      users\n    });\n    dispatch(checkData());\n  }\n}\n\nexport function commentsReceived(comments) {\n  return (dispatch) => {\n    dispatch({\n      type: COMMENTS_RECEIVED,\n      comments\n    });\n    dispatch(checkData());\n  }\n}\n\nexport function checkData() {\n  return {\n    type: CHECK_DATA\n  };\n}\n\nfunction isLoading(state) {\n  return !state.posts || !state.users || !state.comments;\n}\n\nexport function mapData(state) {\n  if (isLoading(state)) return null;\n  const postsListMap = state.posts.map(post => ({...post,\n    user: state.users.find(user => user.id === post.userId),\n    postComments: state.comments.filter(comment => comment.postId === post.id) }));\n  return postsListMap;\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    removePostId: id\n  };\n}\n","import {LOAD, POSTS_RECEIVED, USERS_RECEIVED, COMMENTS_RECEIVED,\n  CHECK_DATA, REMOVE_POST, mapData } from \"./actions\";\n\nconst initialState = {\n  posts: null,\n  users: null,\n  comments: null,\n  postList: null,\n  requested: false\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        requested: true\n      };\n    case POSTS_RECEIVED:\n      return {\n        ...state,\n        posts: action.posts\n      };\n    case USERS_RECEIVED:\n      return {\n        ...state,\n        users: action.users\n      };\n    case COMMENTS_RECEIVED:\n      return {\n        ...state,\n        comments: action.comments\n      };\n    case CHECK_DATA:\n      const postList = mapData(state);\n      if (postList) {\n        return {\n          ...state,\n          postList,\n          requested: false\n        }\n      }\n      return state;\n    case REMOVE_POST:\n      return {\n        ...state,\n        postList: state.postList.filter(post => post.id !== action.removePostId)\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './User.css';\n\nfunction User(props) {\n  const { name, email, address } = props;\n  return (\n    <div className=\"user\">\n      <span className=\"user-name\">{name}</span>\n      <span className=\"user-email\">{email}</span>\n      <span className=\"user-info\">{address.suite} {address.street} {address.city} {address.zipcode}</span>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport './Comment.css';\n\nfunction Comment(props) {\n  const { title, body } = props;\n  return (\n    <div>\n      <h4>{title}</h4>\n      <span className=\"comment-body\">{body}</span>\n    </div>\n  );\n}\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\nfunction CommentList(props) {\n  const { postComments } = props;\n  const postCommentsDiv = postComments.map(comment => <Comment {...comment} key={comment.id} />);\n  return (\n    <div>{postCommentsDiv}</div>\n  );\n}\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport './Post.css';\n\nfunction Post(props) {\n  const { title, body, user, postComments } = props;\n  return (\n    <div>\n      <h1>{title}</h1>\n      <button className='delete' onClick={() => props.postRemoveClicked(props.id)}>DELETE POST</button>\n      <span className='post-body'>{body}</span>\n      <User {...user}/>\n      <CommentList postComments={postComments} />\n      <hr/>\n    </div>\n  );\n}\n\nexport default Post;\n","import {connect} from 'react-redux';\nimport {removePost} from \"../redux/actions\";\nimport Post from \"./Post\";\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    postRemoveClicked: (id) => dispatch(removePost(id))\n  };\n}\n\nconst PostHandler = connect(mapStateToProps, mapDispatchToProps)(Post);\n\nexport default PostHandler;\n","import React from 'react';\nimport PostHandler from './PostHandler';\nimport './PostList.css';\n\nfunction PostList(props) {\n  const { requested, posts } = props;\n  if (posts) {\n    const postItems = posts.map(post => <PostHandler {...post} key={post.id}/>);\n    return (\n      <div>{postItems}</div>\n    );\n  }\n  return (<button className='load' disabled={(requested) ? 'disabled' : ''} onClick={() => props.buttonLoadClicked()}>{(requested) ? 'Loading' : 'Load'}</button>);\n}\n\nexport default PostList;\n","import {connect} from 'react-redux';\nimport {load} from \"../redux/actions\";\nimport PostList from \"./PostList\";\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.postList,\n    requested: state.requested\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonLoadClicked: () => dispatch(load())\n  };\n}\n\nconst PostListHandler = connect(mapStateToProps, mapDispatchToProps)(PostList);\n\nexport default PostListHandler;\n","import React from 'react';\nimport './App.css';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport {getNextState} from \"./redux/reducers\";\nimport PostListHandler from \"./components/PostListHandler\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PostListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}