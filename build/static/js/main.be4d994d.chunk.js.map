{"version":3,"sources":["store.js","api.js","User.js","Comment.js","CommentList.js","Post.js","PostList.js","App.js","debounce.js","index.js"],"names":["getPosts","state","posts","getLoading","loading","getLoaded","loaded","getFilter","filter","store","createStore","action","type","Object","objectSpread2","value","toConsumableArray","post","id","map","comments","comment","API_URL","getData","BASE_URL","defaultData","fetch","then","response","ok","json","catch","User","_ref","user","react_default","a","createElement","className","name","email","address","street","suite","city","mapDispatchToProps","deleteComment","connect","onClick","body","CommentList","Comment","key","deletePost","title","src_User","src_CommentList","PostList","filterPosts","_useState","useState","_useState2","slicedToArray","inputValue","setinputValue","Fragment","onChange","e","input","target","toLowerCase","trimLeft","length","src_Post","mapDispatchtoProps","setPosts","setLoading","setLoaded","setFilter","f","delay","timerID","clearTimeout","_len","arguments","args","Array","_key","setTimeout","apply","concat","debounce","filteredPosts","includes","src_PostList","_ref2","_ref3","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","find","item","userId","postId","stop","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.be4d994d.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nexport const SET_POSTS = 'SET_POSTS';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_LOADED = 'SET_LOADED';\nexport const SET_FILTER = 'SET_FILTER';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPostsAC = value => ({\n  type: SET_POSTS, value,\n});\nexport const setLoadingAC = value => ({\n  type: SET_LOADING, value,\n});\nexport const setLoadedAC = value => ({\n  type: SET_LOADED, value,\n});\nexport const setFilterAC = value => ({\n  type: SET_FILTER, value,\n});\nexport const deletePostAC = value => ({\n  type: DELETE_POST, value,\n});\nexport const deleteCommentAC = value => ({\n  type: DELETE_COMMENT, value,\n});\n\nexport const getPosts = state => state.posts;\nexport const getLoading = state => state.loading;\nexport const getLoaded = state => state.loaded;\nexport const getFilter = state => state.filter;\n\nconst initState = {\n  posts: [],\n  loading: false,\n  loaded: false,\n  filter: '',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.value,\n      };\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: action.value,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.value,\n      };\n    case SET_LOADED:\n      return {\n        ...state,\n        loaded: action.value,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts]\n          .filter(post => post.id !== action.value),\n      };\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: [...state.posts].map(post => ({\n          ...post,\n          comments: post.comments\n            .filter(comment => comment.id !== action.value),\n        })),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initState);\n\nexport default store;\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = (BASE_URL, defaultData) => fetch(BASE_URL)\n  .then(response => (response.ok ? response.json() : defaultData))\n  .catch(() => defaultData);\n\nexport const getPostsFromServer = () => getData(`${API_URL}posts`, []);\n\nexport const getUsersFromServer = () => getData(`${API_URL}users`, []);\n\nexport const getCommentsFromServer = () => getData(`${API_URL}comments`, []);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <div className=\"user\">\n    <b>Post by:</b>\n    <div className=\"user--name\">{user.name}</div>\n    <div className=\"user--email\">{user.email}</div>\n    <div className=\"user--address\">\n      {user.address.street}\n      <br />\n      {user.address.suite}\n      <br />\n      {user.address.city}\n    </div>\n  </div>\n);\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.shape({\n      street: PropTypes.string,\n      suite: PropTypes.string,\n      city: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteCommentAC } from './store';\n\nconst CommentItem = ({ comment, deleteComment }) => (\n  <div className=\"comment\">\n    <button\n      className=\"button--delete\"\n      type=\"button\"\n      onClick={() => deleteComment(comment.id)}\n    >\n      Remove comment\n    </button>\n    <h4 className=\"comment--name\">\n      {comment.name}\n    </h4>\n    <div className=\"comment--email\">\n      {comment.email}\n    </div>\n    <p className=\"comment--body\">{comment.body}</p>\n  </div>\n);\n\nCommentItem.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  deleteComment: deleteCommentAC,\n};\n\nexport default connect(null, mapDispatchToProps)(CommentItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentItem from './Comment';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments\">\n    Comments:\n    {comments.map(\n      comment => <CommentItem key={comment.id} comment={comment} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deletePostAC } from './store';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ post, deletePost }) => (\n  <div className=\"post\">\n    <button\n      className=\"button--delete\"\n      type=\"button\"\n      onClick={() => deletePost(post.id)}\n    >\n      Remove post\n    </button>\n    <h3 className=\"post--header\">\n      {post.title}\n    </h3>\n    <User user={post.user} />\n    <p className=\"post--body\">{post.body}</p>\n    <CommentList comments={post.comments} />\n  </div>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    user: PropTypes.object,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    id: PropTypes.number,\n    comments: PropTypes.array,\n  }).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  deletePost: deletePostAC,\n};\n\nexport default connect(null, mapDispatchToProps)(Post);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts, filterPosts }) => {\n  const [inputValue, setinputValue] = useState('');\n\n  const handleInput = (input) => {\n    setinputValue(input.toLowerCase().trimLeft());\n    filterPosts(inputValue);\n  };\n\n  return (\n    <>\n      Enter text to filter posts by title or body:&nbsp;\n      <input\n        className=\"filter--input\"\n        type=\"text\"\n        value={inputValue}\n        onChange={e => handleInput(e.target.value)}\n      />\n      <h4>\n        {posts.length}\n        &nbsp;post(s) are shown\n      </h4>\n      {posts.map(\n        post => <Post key={post.id} post={post} />\n      )}\n    </>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  filterPosts: PropTypes.func.isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  getPostsFromServer, getUsersFromServer, getCommentsFromServer,\n} from './api';\nimport { debounce } from './debounce';\nimport {\n  getPosts, getLoading, getLoaded, getFilter,\n  setPostsAC, setLoadingAC, setLoadedAC, setFilterAC,\n} from './store';\nimport PostList from './PostList';\n\nconst App = ({ posts, loading, loaded, filter,\n  setPosts, setLoading, setLoaded, setFilter }) => {\n  const loadPosts = async() => {\n    setLoading(true);\n\n    const [postsFromServer,\n      usersFromServer,\n      commentsFromServer] = await Promise.all(\n      [getPostsFromServer(), getUsersFromServer(), getCommentsFromServer()]\n    );\n\n    const preparedPosts = postsFromServer.map((post) => {\n      const user = usersFromServer.find(item => item.id === post.userId);\n      const comments = commentsFromServer\n        .filter(comment => comment.postId === post.id);\n\n      return {\n        ...post, user, comments,\n      };\n    });\n\n    setPosts(preparedPosts);\n    setLoaded(true);\n    setLoading(false);\n  };\n\n  const filterPosts = debounce((input) => {\n    setFilter(input);\n  }, 500);\n\n  const filteredPosts = posts\n    .filter(post => (post.title + post.body).toLowerCase().includes(filter));\n\n  return (\n    <div className=\"App\">\n      <h1>React-Redux list of posts</h1>\n      {!loaded\n        ? (\n          <button\n            className=\"button--load\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {!loading\n              ? 'Load list of posts'\n              : 'loading... Please wait...'}\n          </button>\n        )\n        : (\n          <PostList posts={filteredPosts} filterPosts={filterPosts} />\n        )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  loading: getLoading(state),\n  loaded: getLoaded(state),\n  filter: getFilter(state),\n});\n\nconst mapDispatchtoProps = {\n  setPosts: setPostsAC,\n  setLoading: setLoadingAC,\n  setLoaded: setLoadedAC,\n  setFilter: setFilterAC,\n};\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filter: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  setPosts: PropTypes.func.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  setLoading: PropTypes.func.isRequired,\n  setLoaded: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(App);\n","export const debounce = (f, delay) => {\n  let timerID;\n\n  return (...args) => {\n    clearTimeout(timerID);\n    timerID = setTimeout(f, delay, ...args);\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}