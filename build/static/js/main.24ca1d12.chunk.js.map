{"version":3,"sources":["store/posts.js","components/comment.js","actions.js","components/commentsList.js","components/post.js","store/loading.js","store/loaded.js","store/inputValue.js","components/postList.js","api/loadApi.js","App.js","store/index.js","index.js"],"names":["getPosts","state","posts","getDeletePosts","getDeleteComment","mapDispatchToProps","removeComment","id","type","connect","_ref","title","body","email","react_default","a","createElement","className","Delete_default","onClick","href","CommentsList","comments","map","comment","components_comment","key","name","deleteSinglePost","userName","address","DeleteForever_default","commentsList","getLoading","loading","getIsLoaded","isLoaded","getValue","query","useStyles","makeStyles","theme","margin","spacing","extendedIcon","marginRight","root","& > *","width","PostList","loadingData","setQuery","_useState","useState","_useState2","Object","slicedToArray","inputQuery","setInputQuery","debouncedSetQuery","debounce","postsAfterQuery","filter","item","toLowerCase","includes","classes","Fragment","TextField","style","label","variant","value","onChange","evt","target","post","components_post","user","concat","city","street","Button","color","size","regenerator_default","async","_context","prev","next","awrap","stop","dispatch","_ref2","postsFromServer","usersFromServer","commentsFromServer","Promise","all","fetch","then","response","json","catch","sent","objectSpread2","find","person","userId","postId","defaultProps","App","postList","rootReducer","combineReducers","arguments","length","undefined","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.24ca1d12.chunk.js","sourcesContent":["import { DELETE_COMMENT, DELETE_POST, HANDLE_SUCCESS } from '../actions';\n\nexport const getPosts = state => state.posts;\nexport const getDeletePosts = state => state.posts;\nexport const getDeleteComment = state => state.posts;\n\nexport const postReducer = (posts = [], action) => {\n  switch (action.type) {\n    case HANDLE_SUCCESS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.id);\n    case DELETE_COMMENT:\n      return posts.map(post => (\n        {\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.id),\n        }));\n    default:\n      return posts;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { deleteComment } from '../actions';\nimport { getDeleteComment } from '../store/posts';\n\nconst SingleComment = ({ title, body, email, id, removeComment }) => (\n  <section className=\"comment\">\n    <h4 className=\"comment__header\">\n      <DeleteIcon\n        className=\"button_delete\"\n        onClick={() => removeComment(id)}\n      />\n      {title}\n    </h4>\n    <article>{body}</article>\n    <a\n      className=\"comment__email\"\n      href=\"/#\"\n    >\n      {email}\n    </a>\n\n  </section>\n);\n\nconst mapStateToProps = state => ({\n  posts: getDeleteComment(state.posts),\n});\n\nconst mapDispatchToProps = {\n  removeComment: deleteComment,\n};\n\nSingleComment.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  removeComment: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SingleComment);\n","import { getPosts, getUsers, getComments } from './api/loadApi';\n\nexport const START_LOADING = 'START_LOADING';\nexport const HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const LOADING = 'LOADING';\nexport const CHANGE_QUERY = 'CHANGE_QUERY';\n\nconst startLoading = () => ({ type: START_LOADING });\nconst loadingProcess = () => ({ type: LOADING });\nconst handleSuccess = posts => ({\n  type: HANDLE_SUCCESS, posts,\n});\n\nexport const loadPosts = () => async(dispatch) => {\n  dispatch(loadingProcess());\n\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments(),\n  ]);\n\n  dispatch(handleSuccess(postsFromServer.map(post => (\n    {\n      ...post,\n      user: usersFromServer.find(person => person.id === post.userId),\n      comments: commentsFromServer\n        .filter(comment => comment.postId === post.id),\n    }))));\n\n  dispatch(startLoading());\n};\n\nexport const changeQuery = query => ({\n  type: CHANGE_QUERY, query,\n});\n\nexport const deletePost = id => ({\n  type: DELETE_POST, id,\n});\n\nexport const deleteComment = id => ({\n  type: DELETE_COMMENT, id,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SingleComment from './comment';\n\nconst CommentsList = ({ comments }) => (\n  <article>\n    <h3>Comments:</h3>\n    {comments.map(comment => (\n      <SingleComment\n        key={comment.id}\n        id={comment.id}\n        title={comment.name}\n        body={comment.body}\n        email={comment.email}\n      />\n    ))}\n  </article>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    postId: PropTypes.number,\n  })).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CommentsList from './commentsList';\nimport { deletePost } from '../actions';\nimport { getDeletePosts } from '../store/posts';\n\nconst Post = ({\n  id,\n  title,\n  body,\n  userName,\n  email,\n  address,\n  comments,\n  deleteSinglePost,\n}) => (\n  <article className=\"post\">\n    <h2 className=\"post__title\">\n      <DeleteForeverIcon\n        className=\"button_delete\"\n        onClick={() => deleteSinglePost(id)}\n      />\n      {title}\n    </h2>\n    <p className=\"post__body\">{body}</p>\n    <p className=\"post__user\">\n      Author:&nbsp;\n      {userName}\n    </p>\n    <address className=\"post__address\">{address}</address>\n    <a className=\"post__email\" href=\"/#\">{email}</a>\n    <div className=\"post__comments\">\n      <CommentsList comments={comments} />\n    </div>\n  </article>\n);\n\nconst mapStateToProps = state => ({\n  posts: getDeletePosts(state),\n});\n\nconst mapDispatchToProps = {\n  deleteSinglePost: deletePost,\n};\n\nPost.propTypes = {\n  body: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  userName: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    postId: PropTypes.number,\n  })).isRequired,\n  address: PropTypes.string.isRequired,\n  deleteSinglePost: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Post);\n","import { LOADING } from '../actions';\n\nexport const getLoading = state => state.loading;\n\nexport const loadingReducer = ( loading = false, action) => {\n  switch (action.type) {\n    case LOADING:\n      return true;\n    default:\n      return loading;\n  }\n};\n","import { START_LOADING } from '../actions';\n\nexport const getIsLoaded = state => state.isLoaded;\n\nexport const loadedReducer = (\n  isLoaded = false, action\n) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    default:\n      return isLoaded;\n  }\n};\n","import { CHANGE_QUERY } from '../actions';\n\nexport const getValue = state => state.query;\n\nexport const inputReducer = (query = '', action) => {\n  if (action.type === CHANGE_QUERY) {\n    return action.query;\n  }\n\n  return query;\n};\n","import React, { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { loadPosts, changeQuery } from '../actions';\nimport Post from './post';\nimport { getPosts } from '../store/posts';\nimport { getLoading } from '../store/loading';\nimport { getIsLoaded } from '../store/loaded';\nimport { getValue } from '../store/inputValue';\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  root: {\n    '& > *': {\n      width: 200,\n    },\n  },\n}));\n\nconst PostList\n  = ({ isLoaded, loading, loadingData, posts, setQuery, query }) => {\n    const [inputQuery, setInputQuery] = useState('');\n    const loadData = async() => {\n      await loadingData();\n    };\n    const debouncedSetQuery = debounce(setQuery, 1000);\n\n    const handleChangeQuery = (evt) => {\n      debouncedSetQuery(evt.target.value);\n      setInputQuery(evt.target.value);\n    };\n\n    const postsAfterQuery = !query\n      ? posts\n      : posts.filter(item => item.body.toLowerCase()\n        .includes(query.toLowerCase())\n      || item.title.toLowerCase()\n        .includes(query.toLowerCase()));\n\n    const classes = useStyles();\n\n    return (\n      <div>\n        { isLoaded\n          ? (\n            <>\n              <TextField\n                style={{ margin: 40 }}\n                id=\"outlined-basic\"\n                label=\"Query\"\n                variant=\"outlined\"\n                type=\"text\"\n                value={inputQuery}\n                onChange={handleChangeQuery}\n              />\n\n              <section className=\"main\">\n                {postsAfterQuery.map(post => (\n                  <Post\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    body={post.body}\n                    userName={post.user.name}\n                    email={post.user.email}\n                    address={`${post.user.address.city}, \n                ${post.user.address.street}`}\n                    comments={post.comments}\n                  />\n                ))}\n              </section>\n\n              </>\n          ) : (\n            <div className=\"load\">\n              { loading ? (\n                <div className=\"loadingio-spinner-double-ring-9q7pnd89ma7\">\n                  <div className=\"ldio-825x8t7zp7o\">\n                    <div />\n                    <div />\n                    <div>\n                      <div />\n                    </div>\n                    <div>\n                      <div />\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    className={classes.margin}\n                    onClick={loadData}\n                  >\n                Load\n                  </Button>\n                </>\n              )}\n            </div>\n          )}\n      </div>\n    );\n  };\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  isLoaded: getIsLoaded(state),\n  loading: getLoading(state),\n  query: getValue(state),\n});\n\nconst mapDispatchToProps = ({\n  loadingData: loadPosts,\n  setQuery: changeQuery,\n});\n\nPostList.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loadingData: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    user: PropTypes.objectOf(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n    ])),\n  })),\n};\n\nPostList.defaultProps = {\n  posts: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n","// eslint-disable-next-line max-len\nexport const getPosts = () => fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n\n// eslint-disable-next-line max-len\nexport const getUsers = () => fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n\n// eslint-disable-next-line max-len\nexport const getComments = () => fetch('https://jsonplaceholder.typicode.com/comments')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/postList';\n\nfunction App() {\n  return (\n    <section>\n      <PostList />\n    </section>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { postReducer } from './posts';\nimport { loadingReducer } from './loading';\nimport { loadedReducer } from './loaded';\nimport { inputReducer } from './inputValue';\n\nconst rootReducer = combineReducers({\n  posts: postReducer,\n  isLoaded: loadedReducer,\n  loading: loadingReducer,\n  query: inputReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}