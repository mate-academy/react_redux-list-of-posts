{"version":3,"sources":["store/posts.js","store/query.js","store/isLoading.js","store/isLoaded.js","store/index.js","API/getData.js","components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","API/loadData.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","payload","filter","post","id","map","postId","Object","objectSpread2","comments","comment","commentId","queryReducer","query","createActionSetLoading","isLoadingReducer","isLoading","isLoadedReducer","isLoaded","selectPosts","state","title","toLowerCase","includes","body","selectIsLoading","selectIsSearchError","isSearchError","selectIsLoaded","rootReducer","combineReducers","createStore","applyMiddleware","thunk","getData","URL","fetch","then","response","json","User","_ref","_ref$user","user","name","email","address","react_default","a","createElement","entries","_ref2","_ref3","slicedToArray","key","value","Fragment","mapDispatchToProps","deleteComment","connect","_ref$comment","className","onClick","CommentList","components_Comment","deletePost","_ref$post","components_User","components_CommentList","components_Post","loadData","dispatch","users","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","find","userId","t0","console","error","finish","stop","setQuery","placeholder","onChange","event","target","trim","components_PostList","ReactDOM","render","es","store","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.14d522b2.chunk.js","sourcesContent":["const ACTION_TYPE_SET_POSTS = 'setPosts';\nconst ACTION_TYPE_DELETE_POST = 'deletePost';\nconst ACTION_TYPE_DELETE_COMMENT = 'deleteComment';\n\nexport const createActionSetPosts = payload => ({\n  type: ACTION_TYPE_SET_POSTS,\n  payload,\n});\n\nexport const createActionDeletePost = payload => ({\n  type: ACTION_TYPE_DELETE_POST,\n  payload,\n});\n\nexport const createActionDeleteComment = (postId, commentId) => ({\n  type: ACTION_TYPE_DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_POSTS:\n      return action.payload;\n\n    case ACTION_TYPE_DELETE_POST:\n      return posts.filter(post => post.id !== action.payload);\n\n    case ACTION_TYPE_DELETE_COMMENT:\n      return posts.map(post => post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.commentId),\n        }\n        : post);\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const ACTION_TYPE_SET_QUERY = 'setQuery';\n\nexport const createActionSetQuery = payload => ({\n  type: ACTION_TYPE_SET_QUERY,\n  payload,\n});\n\nconst queryReducer = (query = '', action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_QUERY:\n      return action.payload;\n\n    default:\n    return query;\n  }\n};\n\nexport default queryReducer;\n","const ACTION_TYPE_SET_LOADING = 'setLoading';\n\nexport const createActionSetLoading = payload => ({\n  type: ACTION_TYPE_SET_LOADING,\n  payload,\n});\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_LOADING:\n      return action.payload;\n\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","const ACTION_TYPE_SET_LOADED = 'setLoaded';\n\nexport const createActionSetLoaded = () => ({\n  type: ACTION_TYPE_SET_LOADED,\n});\n\nconst isLoadedReducer = (isLoaded = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_LOADED:\n      return true;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default isLoadedReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport postsReducer from './posts';\nimport queryReducer from './query';\nimport isLoadingReducer from './isLoading';\nimport isLoadedReducer from './isLoaded';\n\nexport const selectPosts = state => state.posts\n  .filter(post => post.title.toLowerCase().includes(state.query)\n    || post.body.toLowerCase().includes(state.query));\nexport const selectIsLoading = state => state.isLoading;\nexport const selectIsSearchError = state => state.isSearchError;\nexport const selectIsLoaded = state => state.isLoaded;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  query: queryReducer,\n  isLoading: isLoadingReducer,\n  isLoaded: isLoadedReducer,\n});\n\nexport default createStore(rootReducer, {}, applyMiddleware(thunk));\n","const postsURL = 'https://jsonplaceholder.typicode.com/posts';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nconst getData = URL => fetch(URL)\n  .then(response => response.json());\n\nexport const getPosts = () => getData(postsURL);\nexport const getUsers = () => getData(usersURL);\nexport const getComments = () => getData(commentsURL);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user: { name, email, address } }) => (\n  <section>\n    <p>{name}</p>\n    <p>{email}</p>\n\n    <address>\n      {Object.entries(address)\n        .map(([key, value]) => typeof value !== 'object' && (\n          <React.Fragment key={key}>\n            {key}\n            {' '}\n            {value}\n            <br />\n          </React.Fragment>\n        ))\n      }\n    </address>\n  </section>\n);\n\nUser.propTypes = { user: PropTypes.shape({\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.object,\n}).isRequired };\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { createActionDeleteComment } from '../store/posts';\n\nconst Comment = ({ postId, deleteComment, comment: { id, name, email, body } }) => (\n  <section className=\"comment\">\n    <section className=\"title\">\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => deleteComment(postId, id)}\n      >\n        x\n      </button>\n      <h3 className=\"comment__title\">\n        {name}\n      </h3>\n    </section>\n\n    <section className=\"comment__main-part\">\n      <p>\n        {email}\n      </p>\n\n      <p className=\"comment__body\">\n        {body}\n      </p>\n    </section>\n  </section>\n);\n\nconst mapDispatchToProps = {\n  deleteComment: createActionDeleteComment,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Comment);\n\nComment.propTypes = {\n  postId: PropTypes.number.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ postId, comments }) => comments.map(comment => (\n  <Comment key={comment.id} comment={comment} postId={postId} />\n));\n\nCommentList.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { createActionDeletePost } from '../store/posts';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ deletePost, post: { id, title, body, user, comments } }) => (\n  <article className=\"post\">\n    <section className=\"title\">\n      <h2>{title}</h2>\n      <button\n        className=\"delete\"\n        onClick={() => deletePost(id)}\n      >\n        x\n      </button>\n    </section>\n\n    <section className=\"post__main-part\">\n      <p className=\"post__body\">\n        {body}\n      </p>\n\n      <User user={user} />\n    </section>\n\n    <CommentList comments={comments} postId={id} />\n  </article>\n);\n\nconst mapDispatchToProps = {\n  deletePost: createActionDeletePost,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Post);\n\nPost.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.object,\n    comments: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { selectPosts } from '../store';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => posts.map(post => (\n  <Post key={post.id} post={post} />\n));\n\nconst mapStateToProps = state => ({\n  posts: selectPosts(state),\n});\n\nexport default connect(mapStateToProps)(PostList);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.object).isRequired };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { selectPosts, selectIsLoading, selectIsSearchError, selectIsLoaded } from './store';\nimport { createActionLoadData } from './API/loadData';\nimport { createActionSetQuery } from './store/query';\n\nimport './App.scss';\nimport PostList from './components/PostList';\n\nconst App = ({ loadData, isLoading, posts, setQuery, isLoaded }) => (\n  <main className=\"list\">\n    <h1>Dynamic list of posts</h1>\n\n    {isLoaded && (\n      <section className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"search post\"\n          className=\"input\"\n          onChange={event => setQuery(event.target.value.toLowerCase().trim())}\n        />\n      </section>\n    )}\n\n    {isLoading && (\n      <button\n        type=\"button\"\n        className=\"button button--non-active\"\n      >\n        Loading\n      </button>\n    )}\n\n    {!isLoading && !isLoaded && (\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={loadData}\n      >\n        Load\n      </button>\n    )}\n\n    {isLoaded && posts.length !== 0 && (\n      <PostList />\n    )}\n\n    {isLoaded && posts.length === 0 && (\n      <p className=\"warning\">\n        There are no such posts, please try another search combination\n      </p>\n    )}\n  </main>\n);\n\nconst mapStateToProps = state => ({\n  posts: selectPosts(state),\n  isLoading: selectIsLoading(state),\n  isSearchError: selectIsSearchError(state),\n  isLoaded: selectIsLoaded(state),\n});\n\nconst mapDispatchToProps = {\n  loadData: createActionLoadData,\n  setQuery: createActionSetQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  loadData: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n","import { getPosts, getUsers, getComments } from '../API/getData';\nimport { createActionSetPosts } from '../store/posts'\nimport { createActionSetLoading } from '../store/isLoading';\nimport { createActionSetLoaded } from '../store/isLoaded';\n\nexport const createActionLoadData = () => async(dispatch) => {\n  dispatch(createActionSetLoading(true));\n\n  try {\n    const [\n      posts,\n      users,\n      comments,\n    ] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n    dispatch(createActionSetPosts(posts.map(post => ({\n      ...post,\n      user: users.find(user => user.id === post.userId),\n      comments: comments.filter(comment => comment.postId === post.id),\n    }))));\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch(createActionSetLoading(false))\n    dispatch(createActionSetLoaded());\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}