{"version":3,"sources":["store/index.js","api/getComments.js","api/getUsers.js","api/getPosts.js","components/User/User.js","components/Comment/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList/PostList.js","components/PostList/index.js","components/App/App.js","components/App/index.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","SEARCH_POST","SWITCH_LOADING_STATE","GET_DATA","loading","type","getData","users","posts","comments","payload","loadData","dispatch","store","Promise","all","fetch","then","response","json","_ref","listUser","_ref2","Object","slicedToArray","map","post","_objectSpread","user","find","id","userId","initialState","preparedPosts","originalPosts","isLoading","createStore","state","arguments","length","undefined","action","filter","title","toLowerCase","includes","value","body","applyMiddleware","thunk","User","react_default","a","createElement","className","name","email","address","city","street","Comment","comment","CommentList","components_Comment_Comment","Post","components_User_User","components_CommentList_CommentList","postId","PostList","item","components_Post_Post","key","newPostList","connect","App","searchPost","onClick","Fragment","placeholder","onChange","newApp","e","_ref3","target","Boolean","window","location","hostname","match","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd76eb58.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getComments } from '../api/getComments';\nimport { getPosts } from '../api/getPosts';\nimport { getUsers } from '../api/getUsers';\n\nconst ACTION_TYPES = {\n  SEARCH_POST: 'SEARCH_POST',\n  SWITCH_LOADING_STATE: 'SWITCH_LOADING_STATE',\n  GET_DATA: 'GET_DATA',\n};\n\nexport const loading = () => ({\n  type: ACTION_TYPES.SWITCH_LOADING_STATE,\n});\n\nexport const getData = (users, posts, comments) => ({\n  type: ACTION_TYPES.GET_DATA,\n  payload: {\n    users,\n    posts,\n    comments,\n  },\n});\n\nexport const loadData = () => (dispatch) => {\n  store.dispatch(loading());\n  Promise.all([getComments(), getUsers(), getPosts()]).then(\n    ([comments, users, posts]) => {\n      store.dispatch(getData(users, UserToPosts(posts, users), comments));\n      store.dispatch(loading());\n    }\n  );\n};\n\nexport const searchPost = ({ target }) => ({\n  type: ACTION_TYPES.SEARCH_POST,\n  payload: target,\n});\n\nfunction UserToPosts(listPost, listUser) {\n  return listPost.map(post => ({\n    ...post,\n    user: listUser.find(user => user.id === post.userId),\n  }));\n}\n\nconst initialState = {\n  preparedPosts: [],\n  originalPosts: [],\n  users: [],\n  comments: [],\n  isLoading: false,\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.SWITCH_LOADING_STATE:\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    case ACTION_TYPES.GET_DATA:\n      return {\n        ...state,\n        preparedPosts: action.payload.posts,\n        originalPosts: action.payload.posts,\n        comments: action.payload.comments,\n        users: action.payload.users,\n      };\n    case ACTION_TYPES.SEARCH_POST:\n      return {\n        ...state,\n        preparedPosts: state.originalPosts.filter(\n          post => post.title\n            .toLowerCase()\n            .includes(action.payload.value.toLowerCase())\n            || post.body.toLowerCase().includes(action.payload.value.toLowerCase())\n        ),\n      };\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","export const getComments = () => {\n  return fetch(`https://jsonplaceholder.typicode.com/comments`).then(response =>\n    response.json()\n  );\n};\n","export const getUsers = () => {\n  return fetch(`https://jsonplaceholder.typicode.com/users`).then(response =>\n    response.json()\n  );\n};\n","export const getPosts = () => {\n  return fetch(`https://jsonplaceholder.typicode.com/posts`).then(response =>\n    response.json()\n  );\n};\n","import React from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  return (\n    <div className=\"user\">\n      <h2 className=\"username\">{user.name}</h2>\n      <p className=\"usermail\">{user.email}</p>\n      <p className=\"useradress\">{user.address.city}</p>\n      <p className=\"useradress\">{user.address.street}</p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  adress: PropTypes.shape({\n    street: PropTypes.string.isRequired,\n    suite: PropTypes.string,\n    city: PropTypes.string.isRequired,\n    zipcode: PropTypes.string,\n    geo: PropTypes.shape({\n      lat: PropTypes.string,\n      lng: PropTypes.string,\n    }),\n  }),\n};\n\nexport default User;\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\n\nfunction Comment({ comment }) {\n  return (\n    <div className=\"comment\">\n      <h3 className=\"comment__name\">{comment.name}</h3>\n      <h4 className=\"comment__email\">{comment.email}</h4>\n      <p className=\"comment__body\">{comment.body}</p>\n    </div>\n  );\n}\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    postId: PropTypes.number,\n    id: PropTypes.number,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport './CommentList.css';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\n\nfunction CommentList({ comments }) {\n  return comments.map(comment => <Comment comment={comment} />);\n}\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      postId: PropTypes.number,\n      id: PropTypes.number,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.stirng,\n    })\n  ),\n};\n\nexport default CommentList;\n","import React from 'react';\nimport './Post.css';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\n\nfunction Post({ post, user, comments }) {\n  return (\n    <div className=\"post\">\n      <User user={user} />\n      <div className=\"post-content\">\n        <h1 className=\"post__title\">{post.title}</h1>\n        <p className=\"post__body\">{post.body}</p>\n      </div>\n      <h2 className=\"desription\">Comments:</h2>\n      <CommentList\n        comments={comments.filter(comment => comment.postId === post.id)}\n      />\n    </div>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  }),\n  user: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      suite: PropTypes.string,\n      city: PropTypes.string.isRequired,\n      zipcode: PropTypes.string,\n    }),\n  }),\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      postId: PropTypes.number,\n      id: PropTypes.number,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string,\n    })\n  ),\n};\n\nexport default Post;\n","import React from 'react';\nimport './PostList.css';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Post';\n\nfunction PostList({ posts, comments }) {\n  return (\n    <div className=\"post-list\">\n      {posts.map(item => (\n        <Post post={item} comments={comments} user={item.user} key={item.id} />\n      ))}\n    </div>\n  );\n}\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      postId: PropTypes.number,\n      id: PropTypes.number,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\n\nconst newPostList = connect(state => ({\n  preparedPosts: state.preparedPosts,\n  comments: state.comments,\n}))(PostList);\n\nexport { newPostList as PostList };\n","import React from 'react';\nimport './App.css';\nimport { PostList } from '../PostList';\n\nconst App = ({\n  loadData,\n  preparedPosts,\n  comments,\n  users,\n  originalPosts,\n  isLoading,\n  searchPost,\n}) => (\n  <div className=\"App\">\n    <h1>Dynamic list of posts</h1>\n\n    <p>\n      <span>posts: </span>\n      {originalPosts.length}\n    </p>\n\n    <p>\n      <span>comments: </span>\n      {comments.length}\n    </p>\n\n    <p>\n      <span>Users: </span>\n      {users.length}\n    </p>\n    {originalPosts.length === 0 ? (\n      <button type=\"button\" onClick={loadData} className=\"btn btn-info\">\n        {isLoading ? (\n          <span className=\"spinner-border spinner-border-sm\" />\n        ) : (\n          <span>Load</span>\n        )}\n        {' '}\n      </button>\n    ) : (\n      <>\n        <input\n          type=\"text\"\n          name=\"text\"\n          placeholder=\"Write text you find\"\n          className=\"form-control\"\n          onChange={searchPost}\n        />\n        <PostList posts={preparedPosts} comments={comments} />\n      </>\n    )}\n  </div>\n);\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport {\n  loading, getData, loadData, searchPost,\n} from '../../store';\n\nconst mapDispatchToProps = dispatch => ({\n  loading: () => dispatch(loading()),\n  getData: () => dispatch(getData()),\n  loadData: () => dispatch(loadData()),\n  searchPost: e => dispatch(searchPost(e)),\n});\n\nconst newApp = connect(\n  state => ({\n    preparedPosts: state.preparedPosts,\n    originalPosts: state.originalPosts,\n    users: state.users,\n    comments: state.comments,\n    isLoading: state.isLoading,\n  }),\n  mapDispatchToProps\n)(App);\n\nexport { newApp as App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}