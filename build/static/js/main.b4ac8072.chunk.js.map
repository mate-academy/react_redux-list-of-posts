{"version":3,"sources":["apiFetch.js","redux/postsReducer.js","redux/loadingReducer.js","redux/queryReducer.js","redux/errorReducer.js","redux/initializedReducer.js","redux/store.js","User.js","Comment.js","CommentsList.js","Post.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["fetchPostsFromServer","url","fetch","then","res","json","setPosts","posts","type","postsReducer","arguments","length","undefined","action","map","post","id","postId","Object","objectSpread2","comments","filter","comment","commentId","setLoading","value","loadingReducer","isLoading","queryReducer","query","setError","errorReducer","error","initializedReducer","isInitialized","getPosts","state","title","body","toLowerCase","includes","getError","getLoading","getInitialized","getPostsWithUsersAndComments","users","user","find","userId","rootReducer","combineReducers","queryreducer","initialisedReducer","store","createStore","applyMiddleware","thunk","User","_ref","react_default","a","createElement","className","name","address","city","street","suite","href","email","mapDispatchToProps","deleteComment","connect","postID","onClick","CommentsList","src_Comment","key","deletePost","src_User","src_CommentsList","src_Post","setQuery","getPostsFromServer","dispatch","_ref2","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","slicedToArray","t0","stop","lib","debounceTimeout","placeholder","onChange","target","trim","disabled","src_PostList","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4ac8072.chunk.js","sourcesContent":["export const  fetchPostsFromServer = url => (\n  fetch(url).then(res => res.json()))\n","const DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n})\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId,\n})\n\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n})\n\nconst postsReducer = (posts=[],action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_COMMENT:\n      return posts.map(post => (post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments\n          .filter(comment => comment.id !== action.commentId),\n        } : post))\n      case DELETE_POST:\n        return posts.filter(post => post.id !== action.postId)\n      default:\n        return posts;\n  }\n};\n\nexport default postsReducer;\n","const SET_LOADING = 'SET_LOADING';\n\nexport const setLoading = value => ({\n  type: SET_LOADING,\n  value,\n})\n\nconst loadingReducer = (isLoading = false,action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return action.value;\n    default:\n      return isLoading\n  }\n}\n\nexport default loadingReducer;\n","const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n})\n\nconst queryReducer = (query = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n}\n\nexport default queryReducer;\n","const SET_ERROR = 'SET_ERROR';\n\nexport const setError = value => ({\n  type: SET_ERROR,\n  value,\n});\n\nconst errorReducer = (error = false,action) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.value;\n    default:\n      return error;\n  }\n}\n\nexport default errorReducer;\n","const SET_INITIALISE = 'SET_INITIALIZE';\n\nexport const setInitialized = value => ({\n  type:SET_INITIALISE,\n  value,\n})\n\nexport const initializedReducer = (isInitialized = false, action) => {\n  switch (action.type) {\n    case SET_INITIALISE:\n      return action.value;\n    default:\n      return isInitialized;\n  }\n}\n\nexport default initializedReducer;\n","import thunk from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { fetchPostsFromServer } from '../apiFetch';\nimport postsReducer, { setPosts } from './postsReducer';\nimport loadingReducer, { setLoading } from './loadingReducer';\nimport queryreducer from './queryReducer';\nimport errorReducer, { setError } from './errorReducer';\nimport initialisedReducer, { setInitialized } from './initializedReducer';\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getPosts = state => state.posts\n  .filter(post => (post.title + post.body).toLowerCase().includes(state.query));\nexport const getError = state => state.error;\nexport const getLoading = state => state.isLoading;\nexport const getInitialized = state => state.isInitialized;\n\nconst getPostsWithUsersAndComments = (posts, users, comments) => (\n  posts.map(post => ({\n    ...post,\n    user:users.find(user => user.id === post.userId),\n    comments:comments.filter(comment => comment.postId === post.id)\n  }))\n);\n\nexport const getPostsFromServer = () => (\n  async(dispatch) => {\n    dispatch(setError(false));\n    dispatch(setLoading(true));\n\n    try {\n      const [posts,users,comments] = await Promise\n      .all([\n        fetchPostsFromServer(POSTS_URL),\n        fetchPostsFromServer(USERS_URL),\n        fetchPostsFromServer(COMMENTS_URL),\n      ]);\n\n      dispatch(setPosts(\n        getPostsWithUsersAndComments(posts,users,comments)\n      ))\n      dispatch(setInitialized(true));\n    }catch {\n      dispatch(setError(true))\n    }\n    dispatch(setLoading(false));\n  }\n)\n\nconst rootReducer = combineReducers({\n  posts:postsReducer,\n  isLoading:loadingReducer,\n  error:errorReducer,\n  query:queryreducer,\n  isInitialized:initialisedReducer,\n})\n\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst User = ({ user }) => (\n  <div className=\"post__user\">\n    <p>name: {user.name}</p>\n    <address>city: {user.address.city}</address>\n    <address>street: {user.address.street} </address>\n    <address>suite: {user.address.suite} </address>\n    <a href={user.email}>email: {user.email}</a>\n  </div>\n);\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    suite: PropTypes.string,\n    address: PropTypes.object\n  }).isRequired\n};\n\nexport default User;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteComment } from \"./redux/postsReducer\";\n\nconst Comment = ({ comment, deleteComment, postID }) => (\n  <div className=\"comment\">\n    <p>{comment.name}</p>\n    <p>{comment.body}</p>\n    <a href={comment.email}>{comment.email}</a>\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => deleteComment(postID, comment.id)}\n    >\n      delete comment\n    </button>\n  </div>\n);\n\nconst mapDispatchToProps = { deleteComment };\n\nexport default connect(() => ({}), mapDispatchToProps)(Comment);\n\nComment.propTypes = {\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string\n  }).isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Comment from \"./Comment\";\n\nconst CommentsList = ({ postId, comments }) => (\n  <div>\n    <h3 className=\"comment-title\">Comments</h3>\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} postID={postId} />\n    ))}\n  </div>\n);\n\nCommentsList.propTypes = {\n  postId: PropTypes.any.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired\n    })\n  ).isRequired\n};\n\nexport default CommentsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deletePost } from \"./redux/postsReducer\";\nimport User from \"./User\";\nimport CommentsList from \"./CommentsList\";\n\nconst Post = ({ post, deletePost }) => (\n  <section className=\"section\">\n    <div className=\"post_header\">\n      <span className=\"post\">Post : {post.id}</span>\n      <User user={post.user} />\n    </div>\n    <button\n      type=\"button\"\n      onClick={() => deletePost(post.id)}\n      className=\"button\"\n    >\n      delete post\n    </button>\n    <h2>{post.title}</h2>\n    <span></span>\n    <p>{post.body}</p>\n\n    <CommentsList comments={post.comments} postId={post.id} />\n  </section>\n);\n\nconst mapDispatchToProps = { deletePost };\n\nexport default connect(() => ({}), mapDispatchToProps)(Post);\n\nPost.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string\n  }).isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from './redux/store';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  posts.map(post => (\n    <Post key={post.id} post={post} />\n  ))\n)\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state)})\n\nexport default connect(mapStateToProps)(PostList)\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.shape({\n  id: PropTypes.number.isRequired,\n})).isRequired };\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport {\n  getError,\n  getLoading,\n  getInitialized,\n  getPostsFromServer,\n  getPosts\n} from './redux/store';\nimport { DebounceInput } from 'react-debounce-input';\nimport { connect } from 'react-redux';\nimport { setQuery } from'./redux/queryReducer';\nimport PostList from './PostList';\n\nconst App = ({\n  isLoading,\n  error,\n  isInitialized,\n  setQuery,\n  getPostsFromServer,\n  posts\n}) => {\n  const handleInputChange = ({ target: { value } }) => {\n    setQuery(value.toLowerCase().trim());\n  };\n  return (\n    <div className=\"App\">\n      {isInitialized && !isLoading && (\n        <DebounceInput\n          debounceTimeout={1000}\n          className=\"input\"\n          type=\"search\"\n          placeholder=\"Search...\"\n          onChange={handleInputChange}\n        />\n      )}\n      {!isInitialized && error && (\n        <button\n          type=\"button\"\n          className=\"button\"\n          disabled={isLoading}\n          onClick={getPostsFromServer}\n        >\n          {isLoading ? \"Loading...\" : \"Try again\"}\n        </button>\n      )}\n      {!isInitialized && !error && (\n        <button\n          type=\"button\"\n          disabled={isLoading}\n          onClick={getPostsFromServer}\n          className=\"button\"\n        >\n          {isLoading ? \"Loading...\" : \"Load\"}\n        </button>\n      )}\n      {!isLoading && isInitialized && posts.length === 0 && (\n        <p> post is not found</p>\n      )}\n      {isInitialized && <PostList />}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n  error: getError(state),\n  isInitialized: getInitialized(state),\n  posts: getPosts(state)\n});\n\nconst mapDispatchToProps = {\n  setQuery,\n  getPostsFromServer\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  error: PropTypes.bool.isRequired,\n  isInitialized: PropTypes.bool.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  getPostsFromServer: PropTypes.func.isRequired\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}