{"version":3,"sources":["store/reducer.js","store/constants.js","utils/api.js","utils/getPostsWithUsers.js","utils/getPostWithComments.js","store/store.js","components/Address/Address.js","components/User/User.js","components/CommentItem/CommentItem.js","components/CommentItem/Index.js","components/CommentList/CommentList.js","components/Post/Post.js","components/Post/Index.js","components/PostList/PostList.js","components/PostList/Index.js","components/Search/Search.js","components/Search/Index.js","components/App/App.js","components/App/Index.js","serviceWorker.js","index.js"],"names":["findElemIndex","list","elemId","findIndex","elem","id","delPostFromState","listOfPosts","postId","foundPostIndex","concat","Object","toConsumableArray","slice","delCommentFromState","commentId","foundCommentIndex","comments","_objectSpread","reducer","state","action","type","buttonText","isLoading","postListFromServer","postsWithComments","postList","filteredList","isLoaded","isError","searchStr","filter","post","title","indexOf","body","getData","dataName","fetch","then","response","json","getPostsWithUsers","userList","map","getPostsWithUsers_objectSpread","user","find","userId","getPostWithComments","commentsList","getPostWithComments_objectSpread","comment","store","createStore","applyMiddleware","thunk","Address","_ref","address","street","suite","city","zipcode","keys","length","react_default","a","createElement","className","defaultProps","User","name","email","href","components_Address_Address","CommentItem","deleteCommentFromPost","Fragment","components_User_User","onClick","connect","dispatch","deleteComment","CommentList","Index","key","Post","props","deletePostFromPostList","components_CommentList_CommentList","deletePost","PostList","posts","Post_Index","Search","searchValue","handleSearchText","e","value","target","_this","setState","handleSubmitPosts","preventDefault","filterList","handleShowAll","resetList","resetPostList","this","onSubmit","placeholder","onChange","Component","filterListOfPosts","App","loadDataFromServer","errorText","disabled","Search_Index","PostList_Index","Promise","all","_ref2","slicedToArray","users","handleSuccess","catch","Boolean","window","location","hostname","match","ReactDOM","render","es","App_Index","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ccf7c90.chunk.js","sourcesContent":["import {\n  START_LOADING,\n  HANDLE_SUCCESS,\n  HANDLE_ERROR,\n  FILTER_LIST,\n  DELETE_COMMENT,\n  DELETE_POST,\n  RESET_LIST,\n} from './constants';\n\nconst findElemIndex = (list, elemId) => (\n  list.findIndex(elem => elem.id === elemId)\n);\n\nconst delPostFromState = (listOfPosts, postId) => {\n  const foundPostIndex = findElemIndex(listOfPosts, postId);\n  return [\n    ...listOfPosts.slice(0, foundPostIndex),\n    ...listOfPosts.slice(foundPostIndex + 1),\n  ];\n};\n\nconst delCommentFromState = (listOfPosts, postId, commentId) => {\n  const foundPostIndex = findElemIndex(listOfPosts, postId);\n  const foundCommentIndex = findElemIndex(\n    listOfPosts[foundPostIndex].comments,\n    commentId\n  );\n\n  return [\n    ...listOfPosts.slice(0, foundPostIndex),\n\n    {\n      ...listOfPosts[foundPostIndex],\n      comments: [\n        ...listOfPosts[foundPostIndex]\n          .comments.slice(0, foundCommentIndex),\n\n        ...listOfPosts[foundPostIndex]\n          .comments.slice(foundCommentIndex + 1),\n      ],\n    },\n\n    ...listOfPosts.slice(foundPostIndex + 1),\n  ];\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        buttonText: 'loading...',\n        isLoading: true,\n      };\n\n    case HANDLE_SUCCESS:\n      return {\n        ...state,\n        postListFromServer: action.postsWithComments,\n        postList: action.postsWithComments,\n        filteredList: action.postsWithComments,\n        isLoaded: true,\n        isLoading: false,\n        isError: false,\n      };\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        buttonText: 'try again',\n        isLoaded: false,\n        isLoading: false,\n        isError: true,\n      };\n\n    case FILTER_LIST:\n      return {\n        ...state,\n        filteredList: action.searchStr\n          ? state.postList\n            .filter(post => (\n              (post.title.indexOf(action.searchStr) >= 0)\n            || (post.body.indexOf(action.searchStr) >= 0)\n            ))\n          : [...state.postList],\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        postList: delCommentFromState(\n          state.postList, action.postId, action.commentId\n        ),\n        filteredList: delCommentFromState(\n          state.filteredList, action.postId, action.commentId\n        ),\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        postList: delPostFromState(state.postList, action.postId),\n        filteredList: delPostFromState(state.filteredList, action.postId),\n      };\n\n    case RESET_LIST:\n      return {\n        ...state,\n        postList: [...state.postListFromServer],\n        filteredList: [...state.postListFromServer],\n      };\n\n    default: return state;\n  }\n};\n\nexport default reducer;\n","export const initialState = {\n  postListFromServer: [],\n  postList: [],\n  filteredList: [],\n  isLoading: false,\n  isLoaded: false,\n  isError: false,\n  buttonText: 'Load',\n};\n\nexport const START_LOADING = 'START_LOADING';\nexport const HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nexport const HANDLE_ERROR = 'HANDLE_ERROR';\nexport const FILTER_LIST = 'FILTER_LIST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const DELETE_POST = 'DELETE_POST';\nexport const RESET_LIST = 'RESET_LIST';\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = dataName => (\n  fetch(`${API_URL}${dataName}`)\n    .then(response => response.json())\n);\n\nexport default getData;\n","function getPostsWithUsers(postList, userList) {\n  return postList.map(\n    post => ({\n      ...post,\n      user: userList.find(user => user.id === post.userId),\n    })\n  );\n}\n\nexport default getPostsWithUsers;\n","function getPostWithComments(postList, commentsList) {\n  return postList.map(post => ({\n    ...post,\n    comments: commentsList.filter(comment => comment.postId === post.id),\n  }));\n}\n\nexport default getPostWithComments;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\nimport getData from '../utils/api';\nimport getPostsWithUsers from '../utils/getPostsWithUsers';\nimport getPostWithComments from '../utils/getPostWithComments';\nimport {\n  initialState,\n  START_LOADING,\n  HANDLE_SUCCESS,\n  HANDLE_ERROR,\n  FILTER_LIST,\n  DELETE_COMMENT,\n  DELETE_POST,\n  RESET_LIST,\n} from './constants';\n\nconst startLoading = () => ({ type: START_LOADING });\n\nconst handleSuccess = postsWithComments => ({\n  type: HANDLE_SUCCESS,\n  postsWithComments,\n});\n\nconst handleError = () => ({ type: HANDLE_ERROR });\n\nexport const loadData = () => (dispatch) => {\n  dispatch(startLoading());\n  Promise.all([\n    getData('comments'),\n    getData('posts'),\n    getData('users'),\n  ])\n    .then(([comments, posts, users]) => {\n      const postsWithComments = getPostWithComments(\n        getPostsWithUsers(posts, users), comments\n      );\n      dispatch(handleSuccess(postsWithComments));\n    })\n    .catch(() => dispatch(handleError()));\n};\n\nexport const filterListOfPosts = searchStr => ({\n  type: FILTER_LIST,\n  searchStr,\n});\n\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const resetListOfPosts = () => ({\n  type: RESET_LIST,\n});\n\nconst store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Address.css';\n\nconst Address = ({ address }) => {\n  const {\n    street, suite, city, zipcode,\n  } = address;\n\n  return (\n    Object.keys(address).length !== 0 ? (\n      <div className=\"address\">\n        <span>{street}</span>\n        <span>{suite}</span>\n        <span>{city}</span>\n        <span>{zipcode}</span>\n      </div>\n    )\n      : null\n  );\n};\n\nAddress.propTypes = {\n  address: PropTypes.shape({\n    street: PropTypes.string,\n    suite: PropTypes.string,\n    city: PropTypes.string,\n    zipcode: PropTypes.string,\n  }),\n};\n\nAddress.defaultProps = {\n  address: {},\n};\n\nexport default Address;\n","/* eslint-disable no-shadow */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\nimport Address from '../Address/Address';\n\nconst User = ({ user }) => {\n  const {\n    name, email, address,\n  } = user;\n\n  return (\n    <div className=\"user\">\n      <h3>{name}</h3>\n      <a href={`mailto:${email}`}>{email}</a>\n      <Address address={address} />\n    </div>\n  );\n};\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.shape({\n      street: PropTypes.string,\n      suite: PropTypes.string,\n      city: PropTypes.string,\n      zipcode: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nAddress.defaultProps = {\n  address: {},\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\n\nconst CommentItem = ({ comment, deleteCommentFromPost }) => {\n  const { body } = comment;\n\n  return (\n    <>\n      <User user={comment} />\n      <p>{body}</p>\n      <button\n        onClick={() => { deleteCommentFromPost(comment.postId, comment.id); }}\n        type=\"button\"\n        className=\"button-delete-item\"\n      >\n        delete comment\n      </button>\n    </>\n  );\n};\n\nCommentItem.propTypes = {\n  deleteCommentFromPost: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    postId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CommentItem;\n","import { connect } from 'react-redux';\nimport CommentItem from './CommentItem';\nimport { deleteComment } from '../../store/store';\n\nconst mapDispatchToProps = dispatch => ({\n  deleteCommentFromPost: (postId, commentId) => (\n    dispatch(deleteComment(postId, commentId))\n  ),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CommentItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentItem from '../CommentItem/Index';\nimport './CommentList.css';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comment-list\">\n    {\n      comments.map(comment => (\n        <CommentItem key={comment.id} comment={comment} />\n      ))\n    }\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport './Post.css';\n\nconst Post = (props) => {\n  const {\n    post,\n    deletePostFromPostList,\n  } = props;\n  const {\n    title, body, user, comments,\n  } = post;\n\n  return (\n    <div className=\"post\">\n      <h2>{title}</h2>\n      <p>{body}</p>\n      <button\n        onClick={() => { deletePostFromPostList(post.id); }}\n        type=\"button\"\n        className=\"button-delete-item\"\n      >\n        delete post\n      </button>\n      <hr />\n      <User user={user} />\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n\nPost.propTypes = {\n  deletePostFromPostList: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.shape({\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        city: PropTypes.string,\n        zipcode: PropTypes.string,\n      }),\n    }).isRequired,\n    comments: PropTypes.arrayOf(\n      PropTypes.shape({\n        postId: PropTypes.number.isRequired,\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string,\n        email: PropTypes.string,\n        body: PropTypes.string,\n      }).isRequired,\n    ).isRequired,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport { deletePost } from '../../store/store';\n\nconst mapDispatchToProps = dispatch => ({\n  deletePostFromPostList: postId => (\n    dispatch(deletePost(postId))\n  ),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from '../Post/Index';\n\nconst PostList = ({ posts }) => (\n  posts.map(post => <Post key={post.id} post={post} />));\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\n\nconst mapStateToProps = state => ({\n  posts: state.filteredList,\n});\n\nexport default connect(mapStateToProps)(PostList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Search.css';\n\nclass Search extends Component {\n  state = {\n    searchValue: '',\n  }\n\n  handleSearchText = (e) => {\n    const { value } = e.target;\n    this.setState({ searchValue: value });\n  };\n\n  handleSubmitPosts = (e) => {\n    e.preventDefault();\n    const { filterList } = this.props;\n    const { searchValue } = this.state;\n    filterList(searchValue);\n  }\n\n  handleShowAll = () => {\n    this.setState({ searchValue: '' });\n    const { filterList } = this.props;\n    filterList('');\n  }\n\n  resetList = () => {\n    this.setState({ searchValue: '' });\n    const { resetPostList } = this.props;\n    resetPostList();\n  }\n\n  render() {\n    const { searchValue } = this.state;\n\n    return (\n      <div>\n        <form className=\"search-form\" onSubmit={this.handleSubmitPosts}>\n          <input\n            placeholder=\"type here...\"\n            onChange={this.handleSearchText}\n            value={searchValue}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n        <button\n          type=\"submit\"\n          onClick={this.handleShowAll}\n        >\n          Show all\n        </button>\n        <button\n          onClick={this.resetList}\n          type=\"button\"\n        >\n          Reset all\n        </button>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  filterList: PropTypes.func.isRequired,\n  resetPostList: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","import { connect } from 'react-redux';\nimport Search from './Search';\nimport {\n  filterListOfPosts,\n  resetListOfPosts,\n} from '../../store/store';\n\nconst mapDispatchToProps = dispatch => ({\n  filterList: searchStr => dispatch(filterListOfPosts(searchStr)),\n  resetPostList: () => dispatch(resetListOfPosts()),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Search);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport PostList from '../PostList/Index';\nimport Search from '../Search/Index';\n\nconst App = (props) => {\n  const {\n    loadDataFromServer,\n    filteredList,\n    isLoaded,\n    isLoading,\n    buttonText,\n    isError,\n  } = props;\n\n  const loadData = () => {\n    loadDataFromServer();\n  };\n\n  if (!isLoaded) {\n    let errorText = null;\n    if (isError) {\n      errorText = <p>No data, try again</p>;\n    }\n\n    return (\n      <div>\n        {errorText}\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          onClick={loadData}\n        >\n          {buttonText}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Dynamic list of posts</h1>\n        <h2>{`Posts: ${filteredList.length}`}</h2>\n        <Search />\n      </header>\n      <PostList />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  loadDataFromServer: PropTypes.func,\n  isLoaded: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isError: PropTypes.bool,\n  buttonText: PropTypes.string,\n  filteredList: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      body: PropTypes.string,\n      user: PropTypes.object.isRequired,\n      comments: PropTypes.array.isRequired,\n    }).isRequired,\n  ),\n};\n\nApp.defaultProps = {\n  loadDataFromServer: () => {},\n  filteredList: [],\n  isLoaded: false,\n  isLoading: false,\n  isError: false,\n  buttonText: '',\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport {\n  loadData,\n} from '../../store/store';\n\nconst mapStateToProps = state => ({\n  postListFromServer: state.postListFromServer,\n  postList: state.postList,\n  filteredList: state.filteredList,\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  isError: state.isError,\n  buttonText: state.buttonText,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadDataFromServer: () => dispatch(loadData()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport App from './components/App/Index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}