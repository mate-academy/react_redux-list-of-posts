{"version":3,"sources":["Api/index.js","Store/index.js","Components/PropTypes/PropTypes.js","Components/User/User.js","Components/Comment/Comment.js","Components/Comment/index.js","Components/CommentList/CommentList.js","Components/CommentList/index.js","Components/Post/Post.js","Components/Post/index.js","Components/PostList/PostList.js","Components/PostList/index.js","Components/Header/Header.js","Components/Header/index.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["getDataFromServer","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","data","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","this","arguments","API_URl","ACTION_TYPES","FILTER_POSTS","RESET_POSTS","SET_DATA_TO_STORE","ISLOADING_POSTS","DELETE_POST","DELETE_COMMENT","toogleLoadingMode","type","getData","dispatch","store","Promise","all","concat","then","usersList","_ref2","slicedToArray","posts","users","comments","postsData","commentsData","payload","setDataToStore","map","post","_objectSpread","user","find","id","userId","initialState","originalPosts","originalComments","isLoading","createStore","state","length","undefined","action","toConsumableArray","filter","_ref3","title","includes","ISLOADING_TODOS","item","applyMiddleware","thunk","commentShape","PropTypes","string","shape","street","suite","city","zipcode","geo","lat","lng","func","postId","number","name","email","body","userShape","arrayOf","username","phone","website","adress","company","catchPhrase","bs","User","bool","address","react_default","createElement","className","Comment","comment","deleteComment","onClick","ImprovedComment","connect","ownProps","commentId","CommentList","commentsList","key","ImprovedCommentList","Post","text","deletePost","Components_User_User","ImprovedPost","PostList","ImprovedPostList","Header","ImprovedHeader","App","filterInputValue","handleInputFilter","target","_this","setState","value","filterPosts","props","handleReset","resetPosts","_this$props","onChange","React","Component","ImprovedApp","Boolean","window","location","hostname","match","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34431e24.chunk.js","sourcesContent":["const getDataFromServer = async(url) => {\n  const data = await fetch(url);\n\n  return data.json();\n};\n\nexport default getDataFromServer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport getDataFromServer from '../Api';\n\nconst API_URl = 'https://jsonplaceholder.typicode.com/';\n\nconst ACTION_TYPES = {\n  FILTER_POSTS: 'POSTS::FILTER',\n  RESET_POSTS: 'POSTS::RESET',\n  SET_DATA_TO_STORE: 'POSTS::TO-STORE',\n  ISLOADING_POSTS: 'POSTS::ISLOADING',\n  DELETE_POST: 'POSTS::DELETE-ITEM',\n  DELETE_COMMENT: 'COMMENT::DELETE',\n};\n\nexport const resetPosts = () => ({\n  type: ACTION_TYPES.RESET_POSTS,\n});\n\nexport const filterPosts = value => ({\n  type: ACTION_TYPES.FILTER_POSTS,\n  payload: value,\n});\n\nexport const deletePost = postId => ({\n  type: ACTION_TYPES.DELETE_POST,\n  payload: postId,\n});\n\nexport const deleteComment = commentId => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  payload: commentId,\n});\n\nconst addingUsers = (postList, usersList) => postList.map(post => (\n  {\n    ...post,\n    user: usersList.find(user => (\n      user.id === post.userId\n    )),\n  }\n));\n\nconst setDataToStore = (postsData, commentsData, users) => ({\n  type: ACTION_TYPES.SET_DATA_TO_STORE,\n  payload: { postsData, commentsData, users },\n});\n\nconst toogleLoadingMode = () => ({\n  type: ACTION_TYPES.ISLOADING_POSTS,\n});\n\nexport const getData = () => (dispatch) => {\n  store.dispatch(toogleLoadingMode());\n  Promise\n    .all([\n      getDataFromServer(`${API_URl}posts`),\n      getDataFromServer(`${API_URl}users`),\n      getDataFromServer(`${API_URl}comments`),\n    ])\n    .then(([posts, users, comments]) => {\n      store.dispatch(\n        setDataToStore(addingUsers(posts, users), comments, users)\n      );\n      store.dispatch(toogleLoadingMode());\n    });\n};\n\nconst initialState = {\n  posts: [],\n  originalPosts: [],\n  comments: [],\n  originalComments: [],\n  users: [],\n  isLoading: false,\n};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ACTION_TYPES.FILTER_POSTS:\n      return {\n        ...state,\n        posts: [...state.originalPosts]\n          .filter(({ title }) => title.includes(action.payload)),\n      };\n    case ACTION_TYPES.RESET_POSTS:\n      return {\n        ...state,\n        posts: [...state.originalPosts],\n        comments: [...state.originalComments],\n      };\n    case ACTION_TYPES.ISLOADING_TODOS:\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    case ACTION_TYPES.SET_DATA_TO_STORE:\n      return {\n        ...state,\n        posts: action.payload.postsData,\n        originalPosts: action.payload.postsData,\n        comments: action.payload.commentsData,\n        originalComments: action.payload.commentsData,\n        users: action.payload.users,\n      };\n    case ACTION_TYPES.DELETE_POST:\n      return {\n        ...state,\n        posts: [...state.posts].filter(item => item.id !== action.payload),\n      };\n    case ACTION_TYPES.DELETE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter(item => item.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n","import PropTypes from 'prop-types';\n\nexport const UserProps = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  adress: PropTypes.shape({\n    street: PropTypes.string,\n    suite: PropTypes.string,\n    city: PropTypes.string,\n    zipcode: PropTypes.string,\n    geo: PropTypes.shape({\n      lat: PropTypes.string,\n      lng: PropTypes.string,\n    }),\n  }),\n};\n\nexport const CommentProps = {\n  comment: PropTypes.string,\n  email: PropTypes.string,\n  deleteComment: PropTypes.func,\n};\n\nconst commentShape = PropTypes.shape({\n  postId: PropTypes.number,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  email: PropTypes.string,\n  body: PropTypes.string,\n});\n\nexport const CommentListProps = {\n  commentsList: PropTypes.arrayOf(\n    PropTypes.shape(commentShape),\n  ),\n};\n\nconst userShape = PropTypes.shape({\n  id: PropTypes.number,\n  name: PropTypes.string,\n  username: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  website: PropTypes.string,\n  adress: PropTypes.shape({\n    street: PropTypes.string,\n    suite: PropTypes.string,\n    city: PropTypes.string,\n    zipcode: PropTypes.string,\n    geo: PropTypes.shape({\n      lat: PropTypes.string,\n      lng: PropTypes.string,\n    }),\n  }),\n  company: PropTypes.shape({\n    name: PropTypes.string,\n    catchPhrase: PropTypes.string,\n    bs: PropTypes.string,\n  }),\n});\n\nexport const AppProps = {\n  isLoading: PropTypes.bool,\n  originalPosts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape(userShape),\n  })),\n  getData: PropTypes.func,\n};\n\nexport const PostProps = {\n  title: PropTypes.string,\n  text: PropTypes.string,\n  user: PropTypes.shape(userShape),\n  id: PropTypes.number,\n  deletePost: PropTypes.func,\n};\n\nexport const PostListProps = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape(userShape),\n  })),\n};\n\nexport const HeaderProps = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  })),\n  users: PropTypes.arrayOf(PropTypes.shape(userShape)),\n  comments: PropTypes.arrayOf(PropTypes.shape(commentShape)),\n};\n","import React from 'react';\nimport './User.css';\nimport { UserProps } from '../PropTypes/PropTypes';\n\nconst User = ({ name, email, address }) => (\n  <div>\n    <h2 className=\"user__name\">{name}</h2>\n    <p className=\"user__email\">{email}</p>\n    <p className=\"user__address\">\n      {`${address.street}, ${address.street}, ${address.city}`}\n    </p>\n  </div>\n);\n\nUser.propTypes = UserProps;\n\nexport default User;\n","import React from 'react';\nimport './Comment.css';\nimport { CommentProps } from '../PropTypes/PropTypes';\n\nconst Comment = ({ comment, email, deleteComment }) => (\n  <div className=\"comment\">\n    <button\n      type=\"button\"\n      onClick={deleteComment}\n      className=\"destroy-comment\"\n    />\n    <p className=\"comment__email\">\n      {email}\n    </p>\n    <p className=\"comment__text\">\n      {comment}\n    </p>\n  </div>\n);\n\nComment.propTypes = CommentProps;\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport Comment from './Comment';\nimport { deleteComment } from '../../Store';\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteComment: () => dispatch(deleteComment(ownProps.id)),\n});\n\nconst ImprovedComment = connect(\n  null,\n  mapDispatchToProps\n)(Comment);\n\nexport {\n  ImprovedComment as Comment,\n};\n","import React from 'react';\nimport { Comment } from '../Comment';\nimport { CommentListProps } from '../PropTypes/PropTypes';\nimport './CommentList.css';\n\nconst CommentList = ({ commentsList }) => (\n  <div className=\"comment-list\">\n    {commentsList.map(comment => (\n      <Comment\n        comment={comment.body}\n        key={comment.id}\n        id={comment.id}\n        email={comment.email}\n      />\n    ))}\n  </div>\n);\n\nCommentList.propTypes = CommentListProps;\n\nexport default CommentList;\n","import { connect } from 'react-redux';\nimport CommentList from './CommentList';\n\nconst ImprovedCommentList = connect(\n  (state, ownProps) => ({\n    commentsList: state.comments.filter(comment => (\n      comment.postId === ownProps.id\n    )),\n  })\n)(CommentList);\n\nexport {\n  ImprovedCommentList as CommentList,\n};\n","import React from 'react';\nimport User from '../User/User';\nimport { CommentList } from '../CommentList';\nimport { PostProps } from '../PropTypes/PropTypes';\n\nimport './Post.css';\n\nconst Post = ({\n  title, text, user, id, deletePost,\n}) => (\n  <div className=\"post\">\n    <button\n      type=\"button\"\n      onClick={deletePost}\n      className=\"destroy\"\n    />\n    <User\n      name={user.name}\n      email={user.email}\n      address={user.address}\n    />\n    <h1 className=\"post__title\">\n      {title}\n    </h1>\n    <p className=\"post__text\">\n      {text}\n    </p>\n    <CommentList id={id} />\n  </div>\n);\n\nPost.propTypes = PostProps;\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport { deletePost } from '../../Store';\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deletePost: () => dispatch(deletePost(ownProps.id)),\n});\n\nconst ImprovedPost = connect(\n  null,\n  mapDispatchToProps,\n)(Post);\n\nexport {\n  ImprovedPost as Post,\n};\n","import React from 'react';\nimport { Post } from '../Post';\nimport { PostListProps } from '../PropTypes/PropTypes';\n\nimport './PostList.css';\n\nconst PostList = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(({\n      title, body, user, id,\n    }) => (\n      <Post\n        title={title}\n        text={body}\n        user={user}\n        id={id}\n        key={id}\n      />\n    ))}\n  </div>\n);\n\nPostList.propTypes = PostListProps;\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\n\nconst ImprovedPostList = connect(\n  state => ({ posts: state.posts })\n)(PostList);\n\nexport {\n  ImprovedPostList as PostList,\n};\n","import React from 'react';\nimport './Header.css';\nimport { HeaderProps } from '../PropTypes/PropTypes';\n\nconst Header = ({ posts, users, comments }) => (\n  <div className=\"header\">\n    <h1 className=\"header__title\">Static list of posts</h1>\n    <p className=\"header__text\">\n      <span className=\"header__span\">posts: </span>\n      {posts.length}\n    </p>\n\n    <p className=\"header__text\">\n      <span className=\"header__span\">comments: </span>\n      {comments.length}\n    </p>\n\n    <p className=\"header__text\">\n      <span className=\"header__span\">Users: </span>\n      {users.length}\n    </p>\n  </div>\n);\n\nHeader.propTypes = HeaderProps;\n\nexport default Header;\n","import { connect } from 'react-redux';\nimport Header from './Header';\n\nconst ImprovedHeader = connect(\n  state => ({\n    users: state.users,\n    posts: state.posts,\n    comments: state.comments,\n  })\n)(Header);\n\nexport {\n  ImprovedHeader as Header,\n};\n","import React from 'react';\nimport './App.css';\nimport { PostList } from '../PostList';\nimport { Header } from '../Header';\nimport { AppProps } from '../PropTypes/PropTypes';\n\nclass App extends React.Component {\n  state = {\n    filterInputValue: '',\n  };\n\n  handleInputFilter = ({ target }) => {\n    this.setState({ filterInputValue: target.value });\n    const { filterPosts } = this.props;\n    filterPosts(target.value);\n  }\n\n  handleReset = () => {\n    this.setState({ filterInputValue: '' });\n    const { resetPosts } = this.props;\n    resetPosts();\n  }\n\n  render() {\n    const {\n      isLoading, originalPosts, getData,\n    } = this.props;\n    const { filterInputValue } = this.state;\n\n    if (isLoading) {\n      return <p className=\"loading-text\">Posts are loading now...</p>;\n    }\n\n    if (originalPosts.length === 0) {\n      return (\n        <button\n          onClick={getData}\n          type=\"button\"\n          className=\"data-button\"\n        >\n        Load all posts\n        </button>\n      );\n    }\n\n    return (\n      <main>\n        <Header />\n        <button\n          type=\"button\"\n          className=\"reset-button\"\n          onClick={this.handleReset}\n        >\n          Return back posts and comments\n        </button>\n        <input\n          type=\"text\"\n          onChange={this.handleInputFilter}\n          value={filterInputValue}\n          className=\"filter-input\"\n        />\n        <PostList />\n      </main>\n    );\n  }\n}\n\nApp.propTypes = AppProps;\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { resetPosts, getData, filterPosts } from '../../Store';\n\nconst mapDispatchToProps = dispatch => ({\n  resetPosts: () => dispatch(resetPosts()),\n  getData: () => dispatch(getData()),\n  filterPosts: value => dispatch(filterPosts(value)),\n});\n\nconst ImprovedApp = connect(\n  state => ({\n    originalPosts: state.originalPosts,\n    isLoading: state.isLoading,\n  }),\n  mapDispatchToProps,\n)(App);\n\nexport {\n  ImprovedApp as App,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Store';\nimport './index.css';\nimport { App } from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}