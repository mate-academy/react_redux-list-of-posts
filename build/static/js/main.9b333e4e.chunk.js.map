{"version":3,"sources":["store.js","api/posts.js","api/comments.js","api/users.js","components/User.js","components/CommentItem.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","index.js"],"names":["ACTION_TYPES","loadData","data","type","payload","initialState","isLoading","isReady","getData","dispatch","store","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","listOfPosts","listOfComments","listOfUsers","map","post","objectSpread2","user","find","id","userId","comments","filter","comment","postId","createStore","state","arguments","length","undefined","action","commentId","applyMiddleware","thunk","User","name","email","react_default","a","createElement","className","connect","handleDeleteComment","body","onClick","CommentList","currentComment","components_CommentItem","key","handleDeletePost","title","concat","components_User","components_CommentList","Fragment","placeholder","currentPost","components_Post","getPosts","components_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"kOAMMA,EACM,WADNA,EAEO,YAFPA,EAGS,cAHTA,EAIY,iBAGZC,EAAW,SAAAC,GAAI,MAAK,CACxBC,KAAMH,EACNI,QAASF,IAmBLG,EAAe,CACnBH,KAAM,GACNI,WAAW,EACXC,SAAS,GAGEC,EAAU,kBAAM,SAACC,GAC5BC,EAAMD,SAASR,KAEfU,QAAQC,IAAI,CCzCgBC,MAFb,8CAGdC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SCDIH,MAFb,iDAGjBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SCDCH,MAFb,8CAGdC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,WHyCxBF,KAAK,SAAAG,GAAA,IA1Baf,EA0BbgB,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAEI,EAAFH,EAAA,GAAeI,EAAfJ,EAAA,GAA+BK,EAA/BL,EAAA,UAAgDT,GA1BnCP,EA2BTmB,EAAYG,IAAI,SAAAC,GAAI,OAAAN,OAAAO,EAAA,EAAAP,CAAA,GAErBM,EAFqB,CAGxBE,KAAMJ,EACHK,KAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOJ,EAAKK,SACjCC,SAAUT,EACPU,OAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWT,EAAKI,SAjCvB,CAC9B1B,KAAMH,EACNI,QAASF,IAkCLQ,EAAMD,SAASR,UA6CRS,EAAQyB,YAzCL,WAAuC,IAAtCC,EAAsCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9BhC,EAAcmC,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC9C,OAAQG,EAAOrC,MACb,KAAKH,EACH,OAAOmB,OAAAO,EAAA,EAAAP,CAAA,GACFiB,EADL,CAEElC,KAAMsC,EAAOpC,UAIjB,KAAKJ,EACH,OAAOmB,OAAAO,EAAA,EAAAP,CAAA,GACFiB,EADL,CAEE9B,WAAY8B,EAAM9B,YAItB,KAAKN,EACH,OAAOmB,OAAAO,EAAA,EAAAP,CAAA,GACFiB,EADL,CAEElC,KAAMkC,EAAMlC,KAAK8B,OAAO,SAAAP,GAAI,OAAIA,EAAKI,KAAOW,EAAOpC,YAIvD,KAAKJ,EACH,OAAOmB,OAAAO,EAAA,EAAAP,CAAA,GACFiB,EADL,CAEElC,KAAMkC,EAAMlC,KAAKsB,IAAI,SAAAC,GAAI,OAAKA,EAAKI,KAAOW,EAAON,OAAnBf,OAAAO,EAAA,EAAAP,CAAA,GAEvBM,EAFuB,CAG1BM,SAAUN,EAAKM,SACZC,OAAO,SAAAC,GAAO,OAAIA,EAAQJ,KAAOW,EAAOC,cAE3ChB,MAIR,QACE,OAAOW,IAMXM,YAAgBC,YI/EHC,MAnBf,SAAA3B,GAAwB,IAARU,EAAQV,EAARU,KAENkB,EAAgBlB,EAAhBkB,KAAMC,EAAUnB,EAAVmB,MAEd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaL,GAC3BE,EAAAC,EAAAC,cAAA,SAAIH,KC8BKK,cAXS,SAAAf,GAAK,MAAK,CAChClC,KAAMkC,EAAMlC,OAU0B,CAAEkD,oBLZP,SAAClB,EAAQO,GAAT,MAAwB,CACzDtC,KAAMH,EACNkC,SACAO,eKSaU,CAlCK,SAAAlC,GAA8C,IAA3CiB,EAA2CjB,EAA3CiB,OAAQD,EAAmChB,EAAnCgB,QAASmB,EAA0BnC,EAA1BmC,oBAC9BvB,EAA0BI,EAA1BJ,GAAIgB,EAAsBZ,EAAtBY,KAAMQ,EAAgBpB,EAAhBoB,KAAMP,EAAUb,EAAVa,MAExB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBL,GAC9BE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBG,GAC7BN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,mBACCH,GAEHC,EAAAC,EAAAC,cAAA,UACEK,QAAS,kBAAMF,EAAoBlB,EAAQL,IAC3CqB,UAAU,iBACV/C,KAAK,UAHP,kBAOA4C,EAAAC,EAAAC,cAAA,cCFSM,EAlBK,SAAAtC,GAAA,IAAGiB,EAAHjB,EAAGiB,OAAQH,EAAXd,EAAWc,SAAX,OAClBgB,EAAAC,EAAAC,cAAA,WACGlB,EAASP,IAAI,SAAAgC,GAAc,OAC1BT,EAAAC,EAAAC,cAACQ,EAAD,CACExB,QAASuB,EACTtB,OAAQA,EACRwB,IAAKF,EAAe3B,SC0CbsB,cAfS,SAAAf,GAAK,MAAK,CAChClC,KAAMkC,EAAMlC,OAc0B,CAAEyD,iBP7BV,SAAAzB,GAAM,MAAK,CACzC/B,KAAMH,EACNI,QAAS8B,KO2BIiB,CA5CF,SAAAlC,GAAgC,IAA7BQ,EAA6BR,EAA7BQ,KAAMkC,EAAuB1C,EAAvB0C,iBACZC,EAAoCnC,EAApCmC,MAAOP,EAA6B5B,EAA7B4B,KAAM1B,EAAuBF,EAAvBE,KAAME,EAAiBJ,EAAjBI,GAAIE,EAAaN,EAAbM,SAE/B,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACVI,QAAS,kBAAMK,EAAiB9B,IAChC1B,KAAK,UAHP,UAOA4C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBU,GAC/Bb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,IAAAW,OAAgCR,EAAhC,MACAN,EAAAC,EAAAC,cAACa,EAAD,CAAMnC,KAAMA,KAEdoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACAH,EAAAC,EAAAC,cAACc,EAAD,CAAahC,SAAUA,EAAUG,OAAQL,UCDtCsB,cAFS,kBAAM,SAAAjC,GAAA,MAAe,CAAEhB,KAAjBgB,EAAGhB,QAElBiD,CAvBE,SAAAlC,GAAA,IAAGf,EAAHe,EAAGf,KAAH,OACf6C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACEjB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACV/C,KAAK,OACL8D,YAAY,WAEb/D,EACEsB,IAAI,SAAA0C,GAAW,OACdnB,EAAAC,EAAAC,cAACkB,EAAD,CACE1C,KAAMyC,EACNR,IAAKQ,EAAYrC,UCkCZsB,cAfS,SAAAf,GAAK,MAAK,CAChClC,KAAMkC,EAAMlC,KACZI,UAAW8B,EAAM9B,YAGS,SAAAG,GAAQ,MAAK,CACvC2D,SAAU,kBAAM3D,EAASD,QASZ2C,CA3CH,SAAAlC,GAAmC,IAAhCf,EAAgCe,EAAhCf,KAAMI,EAA0BW,EAA1BX,UAAW8D,EAAenD,EAAfmD,SAC9B,OAAI9D,EAEAyC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,cAIgB,IAAhBhD,EAAKoC,OAELS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,UACV/C,KAAK,SACLmD,QAASc,GAHX,eAYJrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoB,EAAD,SCxBNC,IAASC,OACPxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAU9D,MAAOA,GACfqC,EAAAC,EAAAC,cAACwB,EAAD,OAEDC,SAASC,eAAe","file":"static/js/main.9b333e4e.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getComments } from './api/comments';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nconst ACTION_TYPES = {\n  ADD_DATA: 'ADD_DATA',\n  LOAD_DATA: 'LOAD_DATA',\n  DELETE_POST: 'DELETE_POST',\n  DELETE_COMMENT: 'DELETE_COMMENT',\n};\n\nconst loadData = data => ({\n  type: ACTION_TYPES.LOAD_DATA,\n  payload: data,\n});\n\nexport const addData = data => ({\n  type: ACTION_TYPES.ADD_DATA,\n  payload: data,\n});\n\nexport const handleDeletePost = postId => ({\n  type: ACTION_TYPES.DELETE_POST,\n  payload: postId,\n});\n\nexport const handleDeleteComment = (postId, commentId) => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst initialState = {\n  data: [],\n  isLoading: false,\n  isReady: true,\n};\n\nexport const getData = () => (dispatch) => {\n  store.dispatch(loadData());\n\n  Promise.all([getPosts(), getComments(), getUsers()])\n    .then(([listOfPosts, listOfComments, listOfUsers]) => dispatch(\n      addData(listOfPosts.map(post => (\n        {\n          ...post,\n          user: listOfUsers\n            .find(user => user.id === post.userId),\n          comments: listOfComments\n            .filter(comment => comment.postId === post.id),\n        }\n      ))),\n      store.dispatch(loadData())\n    ));\n};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_DATA: {\n      return {\n        ...state,\n        data: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.LOAD_DATA: {\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    }\n\n    case ACTION_TYPES.DELETE_POST: {\n      return {\n        ...state,\n        data: state.data.filter(post => post.id !== action.payload),\n      };\n    }\n\n    case ACTION_TYPES.DELETE_COMMENT: {\n      return {\n        ...state,\n        data: state.data.map(post => (post.id === action.postId\n          ? {\n            ...post,\n            comments: post.comments\n              .filter(comment => comment.id !== action.commentId),\n          }\n          : post)),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n","const postsURL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPosts = () => fetch(postsURL)\n  .then(response => response.json());\n","const commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getComments = () => fetch(commentsURL)\n  .then(response => response.json());\n","const usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsers = () => fetch(usersURL)\n  .then(response => response.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  // eslint-disable-next-line no-shadow\n  const { name, email } = user;\n\n  return (\n    <div>\n      <h3 className=\"user-name\">{name}</h3>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { handleDeleteComment } from '../store';\n\n// eslint-disable-next-line no-shadow\nconst CommentItem = ({ postId, comment, handleDeleteComment }) => {\n  const { id, name, body, email } = comment;\n\n  return (\n    <div className=\"comment\">\n      <h3 className=\"comment-name\">{name}</h3>\n      <p className=\"comment-body\">{body}</p>\n      <p className=\"comment-email\">\n        <span>By </span>\n        {email}\n      </p>\n      <button\n        onClick={() => handleDeleteComment(postId, id)}\n        className=\"delete-comment\"\n        type=\"button\"\n      >\n        Delete comment\n      </button>\n      <hr />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n});\n\nCommentItem.propTypes\n  = {\n    postId: PropTypes.number.isRequired,\n    comment: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    handleDeleteComment: PropTypes.func.isRequired,\n  };\n\nexport default connect(mapStateToProps, { handleDeleteComment })(CommentItem);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport CommentItem from './CommentItem';\n\nconst CommentList = ({ postId, comments }) => (\n  <div>\n    {comments.map(currentComment => (\n      <CommentItem\n        comment={currentComment}\n        postId={postId}\n        key={currentComment.id}\n      />\n    ))}\n  </div>\n);\n\nCommentList.propTypes\n  = {\n    postId: PropTypes.number.isRequired,\n    comments: PropTypes.oneOfType([PropTypes.array]).isRequired,\n  };\n\nexport default CommentList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { handleDeletePost } from '../store';\nimport User from './User';\nimport CommentList from './CommentList';\n\n// eslint-disable-next-line no-shadow,react/prop-types\nconst Post = ({ post, handleDeletePost }) => {\n  const { title, body, user, id, comments } = post;\n\n  return (\n    <div className=\"posts\">\n      <div className=\"flip-container\">\n        <button\n          className=\"delete-post\"\n          onClick={() => handleDeletePost(id)}\n          type=\"button\"\n        >\n          Delete\n        </button>\n        <div className=\"flipper\">\n          <div className=\"front\">\n            <h2 className=\"front-heading\">{title}</h2>\n            <p className=\"front-body\">{ `\"${body}\"`}</p>\n            <User user={user} />\n          </div>\n          <div className=\"back\">\n            <p className=\"back-heading\">Comments:</p>\n            <CommentList comments={comments} postId={id} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n});\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({}).isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    comments: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, { handleDeletePost })(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ data }) => (\n  <>\n    <input\n      className=\"search\"\n      type=\"text\"\n      placeholder=\"Search\"\n    />\n    {data\n      .map(currentPost => (\n        <Post\n          post={currentPost}\n          key={currentPost.id}\n        />\n      ))}\n  </>\n);\n\nPostList.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array]).isRequired,\n};\n\nconst mapStateToProps = () => ({ data }) => ({ data });\n\nexport default connect(mapStateToProps)(PostList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { getData } from './store';\nimport PostList from './components/PostList';\n\nconst App = ({ data, isLoading, getPosts }) => {\n  if (isLoading) {\n    return (\n      <div className=\"hoja\">Loading...</div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className=\"App\">\n        <button\n          className=\"btnLoad\"\n          type=\"button\"\n          onClick={getPosts}\n        >\n          Load Posts\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <PostList />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToMethod = dispatch => ({\n  getPosts: () => dispatch(getData()),\n});\n\nApp.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array]).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToMethod)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n"],"sourceRoot":""}