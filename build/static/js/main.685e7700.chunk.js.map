{"version":3,"sources":["components/LoadingPage/index.js","components/LoadingPage/LoadingPage.js","components/User/Users.js","components/Comment/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList/index.js","components/PostList/PostList.js","components/App/App.js","api/data.js","store/index.js","components/App/index.js","index.js"],"names":["Enhanced","connect","state","isLoading","_ref","react_default","a","createElement","Fragment","className","role","Users","name","email","website","Comments","comment","body","CommentList","comments","map","Comment_Comments","key","id","Post","data","title","Users_Users","user","CommentList_CommentList_CommentList","posts","post","Post_Post_Post","App","_this$props","this","props","isLoaded","getDataFromApi","length","onClick","PostList_Enhanced","React","Component","getData","Object","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","concat","sent","abrupt","json","stop","_x","apply","arguments","ACTION_TYPES","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","GET_DATA","loading","type","loaded","dispatch","Promise","all","then","_ref2","slicedToArray","users","getPostsWithUsers","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","undefined","action","_objectSpread","find","item","userId","filter","postId","applyMiddleware","thunk","ReactDOM","render","es","App_Enhanced","document","getElementById"],"mappings":"uYAGMA,eAAWC,YACf,SAAAC,GAAK,MAAK,CAAEC,UAAWD,EAAMC,YADdF,CCCU,SAAAG,GAAmB,IAAhBD,EAAgBC,EAAhBD,UAC5B,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACGL,GACCE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAyBC,KAAK,UAC3CL,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAhB,mBCNGE,qBAAQ,SAAAP,GAAA,IAAGQ,EAAHR,EAAGQ,KAAMC,EAATT,EAASS,MAAOC,EAAhBV,EAAgBU,QAAhB,OACnBT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAKK,GACLP,EAAAC,EAAAC,cAAA,UAAKM,GACLR,EAAAC,EAAAC,cAAA,UAAKO,MCHIC,eAAW,SAAAX,GAAA,IAAGY,EAAHZ,EAAGY,QAAH,OACtBX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAcO,EAAQJ,MACpCP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,wBAAwBO,EAAQH,OAC7CR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aAAaO,EAAQC,SCFzBC,EAAc,SAAAd,GAAA,IAAGe,EAAHf,EAAGe,SAAH,OACzBd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,uBACCY,EAASC,IAAI,SAAAJ,GAAO,OACnBX,EAAAC,EAAAC,cAACc,EAAD,CAAUL,QAASA,EAASM,IAAKN,EAAQO,SCHlCC,EAAO,SAAApB,GAAA,IAAGqB,EAAHrB,EAAGqB,KAAH,OAClBpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAcgB,EAAKC,OACjCrB,EAAAC,EAAAC,cAACoB,EAAUF,EAAKG,OAElBvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aACVgB,EAAKR,MAERZ,EAAAC,EAAAC,cAACsB,EAAD,CAAaV,SAAUM,EAAKN,cCd5BnB,EAAWC,YACf,SAAAC,GAAK,MAAK,CAAE4B,MAAO5B,EAAM4B,QADV7B,CCEO,SAAAG,GAAA,IAAG0B,EAAH1B,EAAG0B,MAAH,OACtBzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACZqB,EAAMV,IAAI,SAAAW,GAAI,OACb1B,EAAAC,EAAAC,cAACyB,EAAD,CAAMP,KAAMM,EAAMT,IAAKS,EAAKR,UCwBnBU,mLA1BJ,IAAAC,EAMHC,KAAKC,MAJPjC,EAFK+B,EAEL/B,UACAkC,EAHKH,EAGLG,SACAC,EAJKJ,EAILI,eACAR,EALKI,EAKLJ,MAEF,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,uBACCuB,EAAMS,SAEPF,IAAalC,GACbE,EAAAC,EAAAC,cAAA,UAAQiC,QAASF,EAAgB7B,UAAU,wBAA3C,cAIFJ,EAAAC,EAAAC,cAACP,EAAD,MACCqC,GAAYhC,EAAAC,EAAAC,cAACkC,EAAD,cArBHC,IAAMC,kECHXC,EAAO,eAAAxC,EAAAyC,OAAAC,EAAA,EAAAD,CAAAE,EAAAzC,EAAA0C,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAJ,EAAAzC,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACEC,MAAK,GAAAC,OAHb,yCAGaA,OAAeP,IADtB,cACfC,EADeE,EAAAK,KAAAL,EAAAM,OAAA,SAGdR,EAASS,QAHK,wBAAAP,EAAAQ,SAAAZ,MAAH,gBAAAa,GAAA,OAAA1D,EAAA2D,MAAA5B,KAAA6B,YAAA,sjBCGpB,IAAMC,EAAe,CACnBC,mBAAoB,qBACpBC,mBAAoB,qBACpBC,SAAU,YAICC,EAAU,iBAAO,CAC5BC,KAAML,EAAaC,qBAGRK,EAAS,iBAAO,CAC3BD,KAAML,EAAaE,qBAUR7B,EAAiB,kBAAM,SAACkC,GACnCA,EAASH,KACTI,QAAQC,IACN,CAAC9B,EAAQ,SACPA,EAAQ,SACRA,EAAQ,cACV+B,KAAK,SAAAvE,GAA8B,IAAAwE,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAAzC,EAAA,GAA5B0B,EAA4B8C,EAAA,GAArBE,EAAqBF,EAAA,GAAdzD,EAAcyD,EAAA,GACnCJ,EAASH,KACTG,EAf6B,SAAC1C,EAAOgD,EAAO3D,GAAf,MAA6B,CAC5DmD,KAAML,EAAaG,SACnBtC,QACAX,WACA2D,SAWWC,CAAkBjD,EAAOgD,EAAO3D,IACzCqD,EAASD,SAIPS,EAAe,CACnBlD,MAAO,GACP3B,WAAW,EACXkC,UAAU,GAgCZ,IAAM4C,EAAmBC,OAAOC,sCAAwCC,IAE3DC,EAAQC,YA/BrB,WAAoD,IAAnCpF,EAAmC8D,UAAAzB,OAAA,QAAAgD,IAAAvB,UAAA,GAAAA,UAAA,GAA3BgB,EAAcQ,EAAaxB,UAAAzB,OAAA,QAAAgD,IAAAvB,UAAA,GAAAA,UAAA,GAAJ,GAC9C,OAAQwB,EAAOlB,MACb,KAAKL,EAAaC,mBAChB,OAAAuB,EAAA,GACKvF,EADL,CAEEC,WAAYD,EAAMC,YAGtB,KAAK8D,EAAaE,mBAChB,OAAAsB,EAAA,GACKvF,EADL,CAEEmC,UAAWnC,EAAMmC,WAGrB,KAAK4B,EAAaG,SAChB,OAAAqB,EAAA,GACKvF,EADL,CAEE4B,MAAO0D,EAAO1D,MAAMV,IAAI,SAAAW,GAAI,OAAA0D,EAAA,GACvB1D,EADuB,CAE1B+C,MAAOU,EAAOV,MAAMY,KAAK,SAAAC,GAAI,OAAIA,EAAKpE,KAAOQ,EAAK6D,SAClDzE,SAAUqE,EAAOrE,SAAS0E,OAAO,SAAA7E,GAAO,OAAIA,EAAQ8E,SAAW/D,EAAKR,WAI1E,QACE,OAAOrB,IAOX+E,EACEc,YAAgBC,OC7DpB,IAAMhG,EAAWC,YARjB,SAAwBC,GACtB,MAAO,CACLmC,SAAUnC,EAAMmC,SAChBlC,UAAWD,EAAMC,UACjB2B,MAAO5B,EAAM4B,QAVS,SAAA0C,GAAQ,MAAK,CACrCD,OAAQ,kBAAMC,EAASD,MACvBF,QAAS,kBAAMG,EAASH,MACxB/B,eAAgB,kBAAMkC,EAASlC,QAWhBrC,CAGfgC,GCbFgE,IAASC,OACP7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAUd,MAAOA,GACfhF,EAAAC,EAAAC,cAAC6F,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.685e7700.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { LoadingPage } from './LoadingPage';\n\nconst Enhanced = connect(\n  state => ({ isLoading: state.isLoading })\n)(LoadingPage);\n\nexport {\n  Enhanced as LoadingPage,\n};\n","import React from 'react';\nimport './LoadingPage.css';\n\n\nexport const LoadingPage = ({ isLoading }) => {\n  return (\n    <>\n      {isLoading && (\n        <div className=\"spinner-grow text-dark\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Users.css';\n\nexport const Users = ({ name, email, website }) => (\n  <>\n    <h6>{name}</h6>\n    <h6>{email}</h6>\n    <h6>{website}</h6>\n  </>\n);\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\n\nexport const Comments = ({ comment }) => (\n  <div className=\"card-body\">\n    <li className=\"card-title\">{comment.name}</li>\n    <p className=\"card-text card-email\">{comment.email}</p>\n    <p className=\"card-text\">{comment.body}</p>\n  </div>\n);\n\nComments.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport './CommentList.css';\n\nimport PropTypes from 'prop-types';\nimport { Comments } from '../Comment/Comment';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"card w-75\">\n    <h4>Comments:</h4>\n    {comments.map(comment => (\n      <Comments comment={comment} key={comment.id} />))}\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport './Post.css';\n\nimport PropTypes from 'prop-types';\nimport { Users } from '../User/Users';\nimport { CommentList } from '../CommentList/CommentList';\n\nexport const Post = ({ data }) => (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      <h4 className=\"card-title\">{data.title}</h4>\n      <Users {...data.user} />\n    </div>\n    <div className=\"card-body\">\n      <p className=\"card-text\">\n        {data.body}\n      </p>\n      <CommentList comments={data.comments} />\n    </div>\n  </div>\n);\n\nPost.propTypes = {\n  data: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.string,\n    comments: PropTypes.string,\n  }).isRequired,\n};\n","import { connect } from 'react-redux';\nimport { PostList } from './PostList';\n\nconst Enhanced = connect(\n  state => ({ posts: state.posts })\n)(PostList);\n\nexport {\n  Enhanced as PostList,\n};\n","import React from 'react';\nimport './PostList.css';\n\nimport { Post } from '../Post/Post';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(post => (\n      <Post data={post} key={post.id} />))\n    }\n  </div>\n);\n","import React from 'react';\nimport './App.css';\nimport { LoadingPage } from '../LoadingPage';\nimport { PostList } from '../PostList';\n\nclass App extends React.Component {\n  render() {\n    const {\n      isLoading,\n      isLoaded,\n      getDataFromApi,\n      posts,\n    } = this.props;\n    return (\n      <div className=\"main\">\n        <h1>Dynamic list of posts</h1>\n        <p>\n          <span>posts: </span>\n          {posts.length}\n        </p>\n        {!isLoaded && !isLoading && (\n          <button onClick={getDataFromApi} className=\"btn btn-outline-dark\">\n            Load posts\n          </button>\n        )}\n        <LoadingPage />\n        {isLoaded && <PostList />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async(url) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getData } from '../api/data';\n\n// action types\nconst ACTION_TYPES = {\n  LOAD_POSTS_REQUEST: 'LOAD_POSTS_REQUEST',\n  LOAD_POSTS_SUCCESS: 'LOAD_POSTS_SUCCESS',\n  GET_DATA: 'GET_DATA',\n};\n\n// action creators\nexport const loading = () => ({\n  type: ACTION_TYPES.LOAD_POSTS_REQUEST,\n});\n\nexport const loaded = () => ({\n  type: ACTION_TYPES.LOAD_POSTS_SUCCESS,\n});\n\nexport const getPostsWithUsers = (posts, users, comments) => ({\n  type: ACTION_TYPES.GET_DATA,\n  posts,\n  comments,\n  users,\n});\n\nexport const getDataFromApi = () => (dispatch) => {\n  dispatch(loading());\n  Promise.all(\n    [getData('posts'),\n      getData('users'),\n      getData('comments')]\n  ).then(([posts, users, comments]) => {\n    dispatch(loading());\n    dispatch(getPostsWithUsers(posts, users, comments));\n    dispatch(loaded());\n  });\n};\n\nconst initialState = {\n  posts: [],\n  isLoading: false,\n  isLoaded: false,\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.LOAD_POSTS_REQUEST: {\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    }\n    case ACTION_TYPES.LOAD_POSTS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: !state.isLoaded,\n      };\n    }\n    case ACTION_TYPES.GET_DATA: {\n      return {\n        ...state,\n        posts: action.posts.map(post => ({\n          ...post,\n          users: action.users.find(item => item.id === post.userId),\n          comments: action.comments.filter(comment => comment.postId === post.id),\n        })),\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducer,\n  composeEnhancers(\n    applyMiddleware(thunk)\n  )\n);\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { getDataFromApi, loaded, loading } from '../../store';\n\nconst mapDispatch2Props = dispatch => ({\n  loaded: () => dispatch(loaded()),\n  loading: () => dispatch(loading()),\n  getDataFromApi: () => dispatch(getDataFromApi()),\n});\n\nfunction mapState2Props(state) {\n  return {\n    isLoaded: state.isLoaded,\n    isLoading: state.isLoading,\n    posts: state.posts,\n  };\n}\n\nconst Enhanced = connect(\n  mapState2Props,\n  mapDispatch2Props,\n)(App);\n\nexport {\n  Enhanced as App,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './components/App';\n\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}