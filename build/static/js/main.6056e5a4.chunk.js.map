{"version":3,"sources":["redux/actions.js","redux/redusers.js","components/User.js","components/Comment.js","components/CommentHandler.js","components/CommentList.js","components/Post.js","components/PostHandler.js","components/PostList.js","components/PostListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD","DISPLAY","REMOVE_POST","REMOVE_COMMENT","GET_INPUT_VALUE","load","dispatch","type","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","posts","users","comments","postsData","map","todo","person","find","user","id","userId","commentsData","filter","comment","postId","objectSpread","data","initialState","requested","inputValue","search","User","props","react_default","a","createElement","className","href","email","title","name","website","address","city","street","suite","Comment","onClick","removeComment","index","postIndex","body","CommentHandler","connect","state","ownProps","post","CommentList","item","components_CommentHandler","key","Post","removePost","components_User","components_CommentList","PostHandler","newPosts","toConsumableArray","PostList","Fragment","placeholder","onChange","event","getInputValue","includes","components_PostHandler","buttonClick","PostListHandler","value","target","store","createStore","arguments","length","undefined","action","inputValueTrim","trim","searchBool","applyMiddleware","thunk","App","es","components_PostListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6056e5a4.chunk.js","sourcesContent":["export const LOAD = 'load';\nexport const DISPLAY = 'display';\nexport const REMOVE_POST = 'remove_post';\nexport const REMOVE_COMMENT = 'remove_comment';\nexport const GET_INPUT_VALUE = 'get_input_value';\n\nexport function load() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD,\n    });\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/comments')\n        .then(response => response.json()),\n    ]).then(([posts, users, comments]) => {\n      const postsData = posts.map((todo) => {\n        const person = users.find(user => user.id === todo.userId);\n        const commentsData = comments.filter((comment) => {\n          return comment.postId === todo.id;\n        });\n        return {\n          ...todo,\n          user: person,\n          comments: commentsData,\n        };\n      });\n      dispatch(display(postsData));\n    });\n  };\n}\n\nexport function display(data) {\n  return {\n    type: DISPLAY,\n    data,\n  };\n}\n\nexport function removePost(index, data) {\n  const newPosts = [...data];\n  return {\n    type: REMOVE_POST,\n    data: newPosts.filter(item => item.id !== index),\n  };\n}\n\nexport function removeComment(index, posts, postIndex) {\n  return {\n    type: REMOVE_COMMENT,\n    data: posts.map((post) => {\n      if (post.id !== postIndex) {\n        return post;\n      }\n      return {\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== index),\n      };\n    }),\n  };\n}\n\nexport function getInputValue(value) {\n  return {\n    type: GET_INPUT_VALUE,\n    value,\n  };\n}\n","import { LOAD, DISPLAY, REMOVE_POST, REMOVE_COMMENT, GET_INPUT_VALUE } from './actions';\n\nconst initialState = {\n  requested: false,\n  data: null,\n  inputValue: null,\n  search: false,\n};\n\nexport default function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        data: action.data,\n      };\n    case REMOVE_POST:\n      return {\n        ...state,\n        data: action.data,\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        data: action.data,\n      };\n    case GET_INPUT_VALUE:\n      const inputValueTrim = action.value.trim();\n      const searchBool = inputValueTrim !== null && inputValueTrim !== \"\" ? true : false;\n      return {\n        ...state,\n        inputValue: inputValueTrim,\n        search: searchBool,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nfunction User(props) {\n\n  return (\n    <div className=\"user-info\">\n      <a href={'mailto:' + props.user.email} title=\"click to mail\"><strong>{props.user.name}</strong></a>\n      <p>Website: <a href={'https://' + props.user.website} title=\"click to visit\">{props.user.website}</a></p>\n      <p>Address: {props.user.address.city}, {props.user.address.street}, {props.user.address.suite}</p>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\n\nfunction Comment(props) {\n  return (\n    <div className=\"comment\">\n      <span className={props.search ? \"post-cross-none\" :\"comment-cross\"} onClick={() => props.removeComment(props.index, props.posts, props.postIndex)}>&times;</span>\n      <h4 className=\"comment-title\">{props.comment.name}</h4>\n      <a href={'mailto:' + props.comment.email} title=\"click to mail\">{props.comment.email}</a>\n      <p>{props.comment.body}</p>\n    </div>\n  );\n}\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport Comment from './Comment';\nimport { removeComment } from '../redux/actions';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    comment: ownProps.comment,\n    index: ownProps.index,\n    posts: state.data,\n    postIndex: ownProps.postIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeComment: (index, posts, postIndex) => dispatch(removeComment(index, posts, postIndex)),\n  };\n}\n\nconst CommentHandler = connect(mapStateToProps, mapDispatchToProps)(Comment);\nexport default CommentHandler;\n","import React from 'react';\nimport CommentHandler from './CommentHandler';\n\nfunction CommentList(props) {\n  return (\n    <div className=\"comments\">\n      <p><em>Comments:</em></p>\n      {props.comments.map(item => <CommentHandler comment={item} index={item.id} postIndex={props.postIndex} key={item.id}/>)}\n    </div>\n  );\n}\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\n\nfunction Post(props) {\n  return (\n    <div className=\"post\">\n      <span className=\"post-cross\" title=\"click to remove post\" onClick={() => props.removePost(props.index, props.posts)}>&times;</span>\n      <h2 className=\"post-title\">{props.title}</h2>\n      <User user={props.user}/>\n      <p className=\"post-body\">{props.body}</p>\n      <CommentList comments={props.comments} postIndex={props.index}/>\n    </div>\n  );\n}\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport { removePost } from '../redux/actions';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    posts: state.data,\n    body: ownProps.post.body,\n    title: ownProps.post.title,\n    user: ownProps.post.user,\n    comments: ownProps.post.comments,\n    index: ownProps.post.id,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removePost: (index, data) => dispatch(removePost(index, data)),\n  };\n}\n\nconst PostHandler = connect(mapStateToProps, mapDispatchToProps)(Post);\nexport default PostHandler;\n","import React from 'react';\nimport PostHandler from './PostHandler';\n\nfunction PostList(props) {\n  if (!props.requested) {\n    return (\n      <div className=\"initial-button-container\">\n        <button  title=\"click to load posts\" className=\"initial-button\" type=\"button\" onClick={props.buttonClick}>Load</button>\n      </div>\n    );\n  }\n  if (props.data === null) {\n    return (\n      <div className=\"preloader\">\n        <div className=\"preloader-title\">Loading...</div>\n        <div className=\"lds-dual-ring\"></div>\n      </div>\n    );\n  }\n  return (\n    <>\n    <input type=\"text\" placeholder=\"Search\" onChange={(event) => props.getInputValue(event)}/>\n    <div className=\"posts\">\n      {\n        props.search ?\n        props.data.filter((post) => {return post.title.includes(props.inputValue) ||\n        post.body.includes(props.inputValue)}).map(item => <PostHandler post={item} key={item.id}/>) :\n        props.data.map(item => <PostHandler post={item} key={item.id}/>)\n      }\n    </div>\n    </>\n  )\n\n}\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\nimport { load, getInputValue } from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    requested: state.requested,\n    data: state.data,\n    inputValue: state.inputValue,\n    search: state.search,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClick: () => dispatch(load()),\n    getInputValue: event => dispatch(getInputValue(event.target.value)),\n  };\n}\n\nconst PostListHandler = connect(mapStateToProps, mapDispatchToProps)(PostList);\nexport default PostListHandler;\n","import React from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport getNextState from './redux/redusers';\nimport PostListHandler from './components/PostListHandler';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PostListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}