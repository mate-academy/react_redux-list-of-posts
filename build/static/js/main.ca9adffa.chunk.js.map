{"version":3,"sources":["store/store.js","User/User.js","Comment/Comment.js","Comment/index.js","CommentList/CommentList.js","Post/Post.js","Post/index.js","PostList/PostList.js","PostList/index.js","App/App.js","App/index.js","index.js"],"names":["ACTION_TYPES","GET_POSTS","TOGGLE_LOADING","FILTER","DELETE_POST","DELETE_COMMENT","RESET","HANDLE_INPUT","initialState","posts","filteredPosts","isLoading","isLoaded","isFiltered","searchWord","toggleLoading","type","payload","getPosts","dispatch","Promise","all","fetch","then","_ref","_ref2","Object","slicedToArray","users","comments","json","_ref3","_ref4","usersMap","reduce","acc","currentUser","_objectSpread","defineProperty","id","name","preparedPosts","map","post","user","userId","filter","el","postId","addPosts","store","createStore","state","arguments","length","undefined","action","toConsumableArray","title","includes","body","elem","applyMiddleware","thunk","User","email","address","react_default","a","createElement","className","concat","city","street","suite","zipcode","defaultProps","Comment","comment","deleteComment","src_User_User","onClick","enhancedComment","connect","CommentList","item","key","Post","deletePost","src_CommentList_CommentList","enhancedPost","PostList","enhancedPostList","App","resetPostsFiltering","handleSearchInputChange","filterPosts","Fragment","onSubmit","e","preventDefault","value","onChange","target","disabled","enhancedApp","ReactDOM","render","es","document","getElementById"],"mappings":"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","file":"static/js/main.ca9adffa.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst ACTION_TYPES = {\n  GET_POSTS: 'GET::POSTS',\n  TOGGLE_LOADING: 'TOGGLE::LOADING',\n  FILTER: 'FILTER',\n  DELETE_POST: 'DELETE::POST',\n  DELETE_COMMENT: 'DELETE::COMMENT',\n  RESET: 'RESET',\n  HANDLE_INPUT: 'HANDLE::INPUT',\n};\n\nconst initialState = {\n  posts: [],\n  filteredPosts: [],\n  isLoading: false,\n  isLoaded: false,\n  isFiltered: false,\n  searchWord: '',\n};\n\nexport const addPosts = posts => ({\n  type: ACTION_TYPES.GET_POSTS,\n  payload: posts,\n});\n\nexport const toggleLoading = isLoading => ({\n  type: ACTION_TYPES.TOGGLE_LOADING,\n  payload: isLoading,\n});\n\nexport const filterPosts = () => ({\n  type: ACTION_TYPES.FILTER,\n});\n\nexport const deletePost = id => ({\n  type: ACTION_TYPES.DELETE_POST,\n  payload: id,\n});\n\nexport const deleteComment = id => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  payload: id,\n});\n\nexport const handleSearchInputChange = value => ({\n  type: ACTION_TYPES.HANDLE_INPUT,\n  payload: value,\n});\n\nexport const resetPostsFiltering = () => ({\n  type: ACTION_TYPES.RESET,\n  payload: '',\n});\n\nexport const getPosts = () => (dispatch) => {\n  dispatch(toggleLoading(true));\n\n  Promise.all([\n    fetch('https://jsonplaceholder.typicode.com/posts'),\n    fetch('https://jsonplaceholder.typicode.com/users'),\n    fetch('https://jsonplaceholder.typicode.com/comments'),\n  ])\n    .then(([posts, users, comments]) => Promise\n      .all([posts.json(), users.json(), comments.json()]))\n    .then(([posts, users, comments]) => {\n      const usersMap = users\n        .reduce((acc, currentUser) => ({\n          ...acc,\n          [currentUser.id]: currentUser.name,\n        }), {});\n\n      const preparedPosts = posts.map(post => ({\n        ...post,\n        user: usersMap[post.userId],\n        comments: comments.filter(el => el.postId === post.id),\n      }));\n\n      dispatch(addPosts(preparedPosts));\n      dispatch(toggleLoading('loaded'));\n    });\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.GET_POSTS: {\n      return {\n        ...state,\n        posts: [\n          ...action.payload,\n        ],\n        filteredPosts: [\n          ...action.payload,\n        ],\n      };\n    }\n\n    case ACTION_TYPES.TOGGLE_LOADING: {\n      return {\n        ...state,\n        isLoading: true,\n        isLoaded: action.payload === 'loaded',\n      };\n    }\n\n    case ACTION_TYPES.FILTER: {\n      return {\n        ...state,\n        filteredPosts: state.posts\n          .filter(el => el.title.includes(state.searchWord)\n            || el.body.includes(state.searchWord)),\n        isFiltered: state.searchWord !== '',\n        searchWord: '',\n      };\n    }\n\n    case ACTION_TYPES.DELETE_POST: {\n      const posts = state.posts.filter(el => el.id !== action.payload);\n      const filteredPosts = state.filteredPosts\n        .filter(el => el.id !== action.payload);\n\n      return {\n        ...state,\n        posts,\n        filteredPosts,\n      };\n    }\n\n    case ACTION_TYPES.DELETE_COMMENT: {\n      const posts = state.posts.map(el => ({\n        ...el,\n        comments: el.comments.filter(elem => elem.id !== action.payload),\n      }));\n      const filteredPosts = state.filteredPosts.map(el => ({\n        ...el,\n        comments: el.comments.filter(elem => elem.id !== action.payload),\n      }));\n\n      return {\n        ...state,\n        posts,\n        filteredPosts,\n      };\n    }\n\n    case ACTION_TYPES.RESET: {\n      return {\n        ...state,\n        filteredPosts: state.posts,\n        isFiltered: false,\n      };\n    }\n\n    case ACTION_TYPES.HANDLE_INPUT: {\n      return {\n        ...state,\n        searchWord: action.payload,\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\n\nconst User = ({\n  name,\n  email,\n  address,\n}) => (\n  <div>\n    <p className=\"name\">\n      {name}\n    </p>\n    <p>\n      {email}\n    </p>\n    {address && (\n      <p>\n        {`${address.city}, ${address.street}, ${address.suite},\n        ${address.zipcode}`}\n      </p>\n    )}\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n    street: PropTypes.string,\n    suite: PropTypes.string,\n    zipcode: PropTypes.string,\n  }),\n};\n\nUser.defaultProps = {\n  address: null,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\nimport './Comment.css';\n\nconst Comment = ({ comment, deleteComment }) => {\n  const { body, email, name } = comment;\n\n  return (\n    <div className=\"comment\">\n      <p>\n        {body}\n      </p>\n      <User name={name} email={email} />\n      <button type=\"button\" onClick={() => deleteComment(comment.id)}>Delete comment</button>\n    </div>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n    name: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport { deleteComment } from '../store/store';\nimport Comment from './Comment';\n\nconst mapDispatchToProps = dispatch => ({\n  deleteComment: id => dispatch(deleteComment(id)),\n});\n\nconst enhancedComment = connect(\n  null,\n  mapDispatchToProps,\n)(Comment);\n\nexport {\n  enhancedComment as Comment,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from '../Comment/index';\nimport './CommentList.css';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments\">\n    {comments.map(item => (\n      <Comment comment={item} key={item.id} />\n    ))}\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf({\n    comment: PropTypes.shape({\n      body: PropTypes.string,\n      email: PropTypes.string,\n      name: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentList from '../CommentList/CommentList';\nimport User from '../User/User';\nimport './Post.css';\n\nconst Post = ({ post, deletePost }) => {\n  const { user, comments } = post;\n\n  return (\n    <div className=\"post\">\n      <h2 className=\"post__title\">{post.title}</h2>\n      <p>{post.body}</p>\n      <User\n        name={user.name}\n        email={user.email}\n        address={user.address}\n      />\n      <button type=\"button\" onClick={() => deletePost(post.id)}>Delete post</button>\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    comments: PropTypes.arrayOf(\n      PropTypes.shape({\n        body: PropTypes.string,\n        email: PropTypes.string,\n        name: PropTypes.string,\n      }).isRequired,\n    ).isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      address: PropTypes.shape({\n        city: PropTypes.string,\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        zipcode: PropTypes.string,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport { deletePost } from '../store/store';\nimport Post from './Post';\n\nconst mapDispatchToProps = dispatch => ({\n  deletePost: id => dispatch(deletePost(id)),\n});\n\nconst enhancedPost = connect(\n  null,\n  mapDispatchToProps,\n)(Post);\n\nexport {\n  enhancedPost as Post,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Post } from '../Post/index';\nimport './PostList.css';\n\nconst PostList = ({ posts }) => (\n  <div className=\"container\">\n    {posts\n      .map(post => <Post post={post} key={post.id} />)}\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf({\n    post: PropTypes.shape({\n      comments: PropTypes.arrayOf({\n        comment: PropTypes.shape({\n          body: PropTypes.string,\n          email: PropTypes.string,\n          name: PropTypes.string,\n        }).isRequired,\n      }).isRequired,\n      user: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        address: PropTypes.shape({\n          city: PropTypes.string,\n          street: PropTypes.string,\n          suite: PropTypes.string,\n          zipcode: PropTypes.string,\n        }).isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\n\nconst enhancedPostList = connect(\n  state => ({\n    posts: state.isFiltered ? state.filteredPosts : state.posts,\n  }),\n)(PostList);\n\nexport {\n  enhancedPostList as PostList,\n}\n","import React from 'react';\nimport { PostList } from '../PostList/index';\nimport './App.css';\n\nconst App = ({\n  isLoading,\n  isLoaded,\n  searchWord,\n  getPosts,\n  resetPostsFiltering,\n  handleSearchInputChange,\n  filterPosts,\n}) => (\n  <div className=\"App\">\n    <h1>Static list of posts</h1>\n    {\n      (isLoaded && (\n        <>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              filterPosts();\n            }}\n          >\n            <input\n              type=\"text\"\n              value={searchWord}\n              onChange={e => handleSearchInputChange(e.target.value)}\n            />\n          </form>\n          <button\n            type=\"button\"\n            onClick={resetPostsFiltering}\n            className=\"mt-30\"\n          >\n            Reset\n          </button>\n          <PostList />\n        </>\n      ))\n      || (isLoading && (<button type=\"button\" disabled>loading...</button>))\n      || (<button type=\"button\" onClick={getPosts}>Load</button>)\n    }\n  </div>\n);\n\nexport default App;\n","import { connect } from 'react-redux';\nimport {\n  getPosts,\n  resetPostsFiltering,\n  handleSearchInputChange,\n  filterPosts,\n} from '../store/store';\nimport App from './App';\n\nconst mapDispatchToProps = dispatch => ({\n  getPosts: id => dispatch(getPosts(id)),\n  resetPostsFiltering: () => dispatch(resetPostsFiltering()),\n  handleSearchInputChange: value => dispatch(handleSearchInputChange(value)),\n  filterPosts: () => dispatch(filterPosts()),\n});\n\nconst enhancedApp = connect(\n  state => ({\n    isLoading: state.isLoading,\n    isLoaded: state.isLoaded,\n    isFiltered: state.isFiltered,\n    searchWord: state.searchWord,\n    posts: state.posts,\n    filteredPosts: state.filteredPosts,\n  }),\n  mapDispatchToProps,\n)(App);\n\nexport {\n  enhancedApp as App,\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/store';\nimport { App } from './App/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}