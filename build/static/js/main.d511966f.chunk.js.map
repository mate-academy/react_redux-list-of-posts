{"version":3,"sources":["store/posts.js","store/isLoaded.js","store/loading.js","store/originalPost.js","Comment.js","Post.js","PostList.js","api/GetDataFromServer.js","Main.js","App.js","store/index.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","isLoadedReducer","isLoaded","loadingReducer","loading","originalPostReducer","originalPost","Comment","_ref","comment","react_default","a","createElement","className","name","email","body","Post","ownpost","Fragment","title","user","address","street","suite","city","zipcode","geo","lat","lng","comments","map","src_Comment","key","id","PostList","post","src_Post","getDataFromServer","URL","fetch","then","dataList","json","setStateToStore","setPosts","newSetData","setIsLoaded","newSetIsLoaded","setIsLoading","newSetLoading","setOriginalPost","newOriginalPost","connect","state","_useState","useState","_useState2","Object","slicedToArray","textInput","inputText","f","delay","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","onClick","_ref2","_ref3","allUsers","allComments","allPosts","unitedPost","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","objectSpread2","find","userId","filter","commentId","postId","stop","filteredPost","includes","JSON","stringify","_unused","placeholder","onChange","event","target","value","src_PostList","App","src_Main","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","index","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d511966f.chunk.js","sourcesContent":["export const setPosts = newSetData => ({\n  type: 'CHANGE_POSTS',\n  posts: newSetData,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch(action.type) {\n    case 'CHANGE_POSTS':\n      return  action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","export const setIsLoaded = newSetIsLoaded => ({\n  type: 'CHANGE_IS_LOADED',\n  isLoaded: newSetIsLoaded,\n});\n\nconst isLoadedReducer = (isLoaded = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_IS_LOADED':\n      return  action.isLoaded;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default isLoadedReducer;\n","export const setIsLoading = newSetLoading => ({\n  type: 'CHANGE_LOADING',\n  loading: newSetLoading,\n});\n\nconst loadingReducer = (loading = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_LOADING':\n      return  action.loading;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","export const setOriginalPost = newOriginalPost => ({\n  type: 'CHANGE_ORIGINAL_POST',\n  originalPost: newOriginalPost,\n});\n\nconst originalPostReducer = (originalPost = [], action) => {\n  switch(action.type) {\n    case 'CHANGE_ORIGINAL_POST':\n      return  action.originalPost;\n\n    default:\n      return originalPost;\n  }\n};\n\nexport default originalPostReducer;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Comment = ({ comment }) => (\n  <div>\n    <h3 className=\"headers\">\n      {comment.name}\n    </h3>\n    <p>\n      {comment.email}\n    </p>\n    <p>\n      {comment.body}\n    </p>\n  </div>\n);\n\nComment.propTypes = { comment: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\n\nconst Post = ({ ownpost }) => (\n  <>\n    <section className=\"post\">\n      <h1 className=\"post__title\">\n        {ownpost.title}\n      </h1>\n      <p className=\"post__text\">\n        {ownpost.body}\n      </p>\n    </section>\n    <section className=\"userSection\">\n      {ownpost.user.name}\n      <br />\n      {ownpost.user.email}\n      <br />\n      {ownpost.user.address.street}\n      {ownpost.user.address.suite}\n      {ownpost.user.address.city}\n      {ownpost.user.address.zipcode}\n      {ownpost.user.address.geo.lat}\n      {ownpost.user.address.geo.lng}\n    </section>\n    <section className=\"commentSection\">\n      {\n        ownpost.comments.map(comment => (\n          <Comment key={comment.id} comment={comment} />))\n      }\n    </section>\n  </>\n);\n\nPost.propTypes = { ownpost: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post-list\">\n    { posts.map(post => (\n      <div key={post.id} className=\"allPost\">\n        <Post ownpost={post} />\n      </div>\n    ))}\n  </section>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.any).isRequired };\n\nexport default PostList;\n","const getDataFromServer = URL => fetch(URL).then(dataList => dataList.json());\n\nexport default getDataFromServer;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport  * as posts from './store/posts';\nimport  * as isLoaded from './store/isLoaded';\nimport  * as loading from './store/loading';\nimport  * as originalPost from './store/originalPost';\n\nimport PostList from './PostList';\nimport getDataFromServer from './api/GetDataFromServer';\n\nconst Main = ({\n  posts, setPosts,\n  isLoaded, setIsLoaded,\n  loading, setIsLoading,\n  originalPost, setOriginalPost,\n}) => {\n  const [textInput, setTextInput] = useState('');\n\n  const loadPosts = async() => {\n    setIsLoading(true);\n    const [allUsers, allComments, allPosts]\n    = await Promise.all([\n      getDataFromServer('https://jsonplaceholder.typicode.com/users'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/comments'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/posts'),\n    ]);\n\n    setIsLoading(true);\n    const unitedPost = allPosts.map(post => ({\n      ...post,\n      user: allUsers.find(user => user.id === post.userId),\n      comments: allComments.filter(commentId => commentId.postId === post.id),\n    }));\n\n    setOriginalPost(unitedPost);\n    setPosts(unitedPost);\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  function debounce(f, delay) {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => f(...args), delay);\n    };\n  }\n\n  const inputText = debounce(setTextInput, 1000);\n\n  if (loading) {\n    return (\n      <p className=\"App\">...LOADING</p>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <section className=\"App\">\n        <button type=\"button\" onClick={loadPosts}>\n          Load\n        </button>\n      </section>\n    );\n  }\n\n  const filteredPost = originalPost.filter((post) => {\n    const postContent = post.title + post.body;\n\n    return postContent.includes(textInput);\n  });\n\n  if (JSON.stringify(filteredPost) !== JSON.stringify(posts)) {\n    try {\n      setPosts(filteredPost);\n    } catch {\n      setPosts([]);\n    }\n  }\n\n  return (\n    <section className=\"App\">\n      <input\n        id=\"text\"\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={event => inputText(event.target.value)}\n      />\n      <p>\n        {posts.length}\n        {' '}\n        posts found\n      </p>\n      <PostList posts={posts} />\n    </section>\n  );\n};\n\nconst getStateFromStore = state => ({\n  posts: state.posts,\n  isLoaded: state.isLoaded,\n  loading: state.loading,\n  originalPost: state.originalPost,\n})\n\nconst setStateToStore = {\n  setPosts: posts.setPosts,\n  setIsLoaded: isLoaded.setIsLoaded,\n  setIsLoading: loading.setIsLoading,\n  setOriginalPost: originalPost.setOriginalPost,\n};\n\nMain.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  setIsLoaded: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n}\n\nexport default connect(getStateFromStore, setStateToStore)(Main);\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nconst App = () => <Main />;\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\nimport postsReducer from './posts';\nimport isLoadedReducer from './isLoaded';\nimport loadingReducer from './loading';\nimport originalPostReducer from './originalPost';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoaded: isLoadedReducer,\n  loading: loadingReducer,\n  originalPost: originalPostReducer,\n});\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport index from './store/index';\n\nReactDOM.render(\n  <Provider store={ index }><App /></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}