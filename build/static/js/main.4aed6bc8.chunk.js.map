{"version":3,"sources":["getDataApi.js","redux/postsReducer.js","redux/loadingReducer.js","redux/errorReducer.js","redux/initializedReducer.js","redux/queryReducer.js","redux/store.js","User.js","Comment.js","CommentList.js","Post.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["getDataFromServer","url","fetch","then","response","json","postsReducer","posts","arguments","length","undefined","action","type","filter","post","id","postId","map","Object","objectSpread2","comments","comment","commentId","setLoading","value","loadingReducer","isLoading","setError","errorReducer","hasError","initializedReducer","isInitialized","queryReducer","query","getPosts","state","title","body","toLowerCase","includes","getLoading","getError","getInitialized","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","User","_ref","user","react_default","a","createElement","className","concat","name","address","city","street","suite","email","mapDispatchToProps","deleteComment","connect","onClick","CommentList","commentData","src_Comment","key","deletePost","src_User","src_CommentList","src_Post","setQuery","getPostsFromServer","dispatch","Promise","all","allUsers","allComments","_ref2","slicedToArray","users","setPosts","find","userId","catch","finally","lib","debounceTimeout","placeholder","onChange","target","trim","disabled","src_PostList","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4aed6bc8.chunk.js","sourcesContent":["const getDataFromServer = url => (\n  fetch(url).then(response => response.json())\n);\n\nexport default getDataFromServer;\n","const ACTION_TYPE_SET_POSTS = 'setPosts';\nconst ACTION_TYPE_DELETE_POST = 'deletePost';\nconst ACTION_TYPE_DELETE_COMMENT = 'deleteComment';\n\nexport const setPosts = posts => ({\n  type: ACTION_TYPE_SET_POSTS,\n  posts,\n});\n\nexport const deletePost = postId => ({\n  type: ACTION_TYPE_DELETE_POST,\n  postId,\n});\n\nexport const deleteComment = (postId, commentId) => ({\n  type: ACTION_TYPE_DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_POSTS:\n      return action.posts;\n\n    case ACTION_TYPE_DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n\n    case ACTION_TYPE_DELETE_COMMENT:\n      return posts.map(post => (post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments\n            .filter(comment => comment.id !== action.commentId),\n        }\n        : post));\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const ACTION_TYPE_SET_LOADING = 'setLoading';\n\nexport const setLoading = value => ({\n  type: ACTION_TYPE_SET_LOADING,\n  value,\n});\n\nconst loadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_LOADING:\n      return action.value;\n    default:\n      return isLoading;\n  }\n};\n\nexport default loadingReducer;\n","const ACTION_TYPE_SET_ERROR = 'setError';\n\nexport const setError = value => ({\n  type: ACTION_TYPE_SET_ERROR,\n  value,\n});\n\nconst errorReducer = (hasError = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_ERROR:\n      return action.value;\n    default:\n      return hasError;\n  }\n};\n\nexport default errorReducer;\n","const ACTION_TYPE_SET_INITIALIZED = 'setInitialized';\n\nexport const setInitialized = value => ({\n  type: ACTION_TYPE_SET_INITIALIZED,\n  value,\n});\n\nconst initializedReducer = (isInitialized = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_INITIALIZED:\n      return action.value;\n    default:\n      return isInitialized;\n  }\n};\n\nexport default initializedReducer;\n","const ACTION_TYPE_SET_QUERY = 'setQuery';\n\nexport const setQuery = query => ({\n  type: ACTION_TYPE_SET_QUERY,\n  query,\n});\n\nconst queryReducer = (query = '', action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport getDataFromServer from '../getDataApi';\n\nimport postsReducer, { setPosts } from './postsReducer';\nimport loadingReducer, { setLoading } from './loadingReducer';\nimport errorReducer, { setError } from './errorReducer';\nimport initializedReducer, { setInitialized } from './initializedReducer';\nimport queryReducer from './queryReducer';\n\nconst postsURL = 'https://jsonplaceholder.typicode.com/posts';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getPosts = state => state.posts\n  .filter(post => (post.title + post.body).toLowerCase().includes(state.query));\nexport const getLoading = state => state.isLoading;\nexport const getError = state => state.hasError;\nexport const getInitialized = state => state.isInitialized;\n\nconst getPostsWithUsersAndComments = (allPosts, allUsers, allComments) => (\n  allPosts.map(post => ({\n    ...post,\n    user: allUsers.find(user => user.id === post.userId),\n    comments: allComments.filter(comment => comment.postId === post.id),\n  }))\n);\n\nexport const getPostsFromServer = () => (dispatch) => {\n  dispatch(setError(false));\n  dispatch(setLoading(true));\n\n  return Promise.all(\n    [getDataFromServer(postsURL),\n      getDataFromServer(usersURL),\n      getDataFromServer(commentsURL)]\n  )\n    .then(([posts, users, comments]) => {\n      dispatch(setPosts(\n        getPostsWithUsersAndComments(posts, users, comments)\n      ));\n      dispatch(setInitialized(true));\n    })\n    .catch(() => {\n      dispatch(setError(true));\n    })\n    .finally(() => {\n      dispatch(setLoading(false));\n    });\n};\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: loadingReducer,\n  hasError: errorReducer,\n  isInitialized: initializedReducer,\n  query: queryReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <div className=\"post__user\">\n    <p>{`name: ${user.name}`}</p>\n    <p>{`city: ${user.address.city}`}</p>\n    <p>{`street: ${user.address.street} `}</p>\n    <p>{`suite: ${user.address.suite} `}</p>\n    <p>{`email: ${user.email}`}</p>\n  </div>\n);\n\nUser.propTypes = { user: PropTypes.shape({\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.object,\n}).isRequired };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from './redux/postsReducer';\n\nconst Comment = ({ postId, deleteComment, comment }) => (\n  <div className=\"comment\">\n    <button\n      type=\"button\"\n      className=\"post__delete-button\"\n      onClick={() => deleteComment(postId, comment.id)}\n    >\n      x\n    </button>\n    <div className=\"comment__name\">{comment.name}</div>\n    <div className=\"comment__body\">{comment.body}</div>\n    <div className=\"comment__email\">{comment.email}</div>\n    <hr />\n  </div>\n);\n\nconst mapDispatchToProps = {\n  deleteComment,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Comment);\n\nComment.propTypes = {\n  postId: PropTypes.number.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ postId, comments }) => (\n  <div className=\"comment-list\">\n    <h3>Comments</h3>\n    <hr />\n    {comments.map(\n      commentData => (\n        <Comment\n          comment={commentData}\n          key={commentData.id}\n          postId={postId}\n        />\n      )\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deletePost } from './redux/postsReducer';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ deletePost, post }) => (\n  <section className=\"post\">\n    <article className=\"post__content\">\n      <button\n        className=\"post__delete-button\"\n        type=\"button\"\n        onClick={() => deletePost(post.id)}\n      >\n        x\n      </button>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n      <User user={post.user} />\n    </article>\n    <CommentList comments={post.comments} postId={post.id} />\n    <hr />\n  </section>\n);\n\nconst mapDispatchToProps = {\n  deletePost,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Post);\n\nPost.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      address: PropTypes.shape({\n        city: PropTypes.string.isRequired,\n        street: PropTypes.string,\n        suite: PropTypes.string,\n      }).isRequired,\n    }).isRequired,\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    })).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from './redux/store';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => posts.map(post => (\n  <Post key={post.id} post={post} />\n));\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n});\n\nexport default connect(mapStateToProps)(PostList);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      street: PropTypes.string,\n      suite: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n})).isRequired };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport {\n  getLoading,\n  getError,\n  getInitialized,\n  getPostsFromServer,\n} from './redux/store';\nimport { setQuery } from './redux/queryReducer';\nimport PostList from './PostList';\nimport './App.css';\n\nconst App = ({ isLoading, hasError, isInitialized,\n  setQuery, getPostsFromServer }) => {\n  const handleSearchingInputChange = ({ target: { value } }) => {\n    setQuery(value.toLowerCase().trim());\n  };\n\n  return (\n    <div className=\"App\">\n      {isInitialized && (\n        <DebounceInput\n          debounceTimeout={500}\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"posts__search\"\n          onChange={handleSearchingInputChange}\n        />\n      )}\n\n      {!isInitialized && !hasError && (\n        <button\n          className=\"load-button\"\n          type=\"button\"\n          disabled={isLoading}\n          onClick={getPostsFromServer}\n        >\n          {isLoading ? 'Loading...' : 'Load posts'}\n        </button>\n      )}\n      {!isInitialized && hasError && (\n        <button\n          className=\"load-button\"\n          type=\"button\"\n          disabled={isLoading}\n          onClick={getPostsFromServer}\n        >\n          {isLoading ? 'Loading...' : 'Try again'}\n        </button>\n      )}\n      { isInitialized && (\n        <PostList />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n  hasError: getError(state),\n  isInitialized: getInitialized(state),\n});\n\nconst mapDispatchToProps = {\n  setQuery,\n  getPostsFromServer,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  isInitialized: PropTypes.bool.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  getPostsFromServer: PropTypes.func.isRequired,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}