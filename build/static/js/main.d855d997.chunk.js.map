{"version":3,"sources":["redux/action.js","redux/reducer.js","components/userComponent/User.js","components/commensComponent/Comment.js","components/commensComponent/CommentListHandler.js","components/commensComponent/CommentList.js","components/postComponent/PostHandler.js","components/postComponent/Post.js","components/PostList.js","components/PostListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_DATA","DISPLAY","REMOVE_POST","FIND_POST","REMOVE_COMMENT","loadAction","dispatch","type","Promise","all","fetch","then","_ref","_ref2","Object","slicedToArray","postsResponse","usersResponse","commentsResponse","json","data","displayAction","initialState","listPosts","searchedPosts","commentList","requested","search","postApp","state","arguments","length","undefined","action","objectSpread","searchText","value","trim","searchedPost","filter","post","title","includes","body","_action$data","posts","users","comments","map","user","find","id","userId","toConsumableArray","comment","User","props","react_default","a","createElement","className","name","email","address","city","street","suite","zipcode","Comment","onClick","removeComment","CommentListHandler","connect","ownProps","removeCommentAction","key","PostHandler","remove","removeAction","commensComponent_CommentListHandler","postList","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchItem","bind","assertThisInitialized","e","target","_this2","onKeyDown","placeholder","postId","postComponent_PostHandler","load","Component","PostListHandler","findAction","PostList","App","store","createStore","applyMiddleware","thunk","es","components_PostListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d855d997.chunk.js","sourcesContent":["export const LOAD_DATA = 'load_data';\r\nexport const DISPLAY = 'display';\r\nexport const REMOVE_POST = 'remove_post';\r\nexport const FIND_POST  = 'find_post';\r\nexport const REMOVE_COMMENT = 'remove_comment';\r\n\r\nexport function findAction(value) {\r\n  return {\r\n    type: FIND_POST,\r\n    value\r\n  }\r\n}\r\n\r\nexport function removeAction(id) {\r\n  return {\r\n    type: REMOVE_POST,\r\n    id\r\n  }\r\n};\r\n\r\nexport function removeCommentAction(id) {\r\n  return {\r\n    type: REMOVE_COMMENT,\r\n    id\r\n  }\r\n}\r\n\r\nexport function loadAction() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD_DATA\r\n    });\r\n    Promise.all([\r\n      fetch('https://jsonplaceholder.typicode.com/posts'),\r\n      fetch('https://jsonplaceholder.typicode.com/users'),\r\n      fetch('https://jsonplaceholder.typicode.com/comments')\r\n    ])\r\n      .then(([postsResponse, usersResponse, commentsResponse]) => {\r\n        Promise.all([\r\n          postsResponse.json(),\r\n          usersResponse.json(),\r\n          commentsResponse.json()\r\n        ])\r\n          .then(data => dispatch(displayAction(data)));\r\n      });\r\n  };\r\n};\r\n\r\nfunction displayAction(data) {\r\n  return {\r\n    type: DISPLAY,\r\n    data\r\n  }\r\n}","import { DISPLAY, LOAD_DATA, REMOVE_POST, FIND_POST, REMOVE_COMMENT} from \"./action\";\r\n\r\nconst initialState = {\r\n  listPosts: null,\r\n  searchedPosts: null,\r\n  commentList: null,\r\n  requested: false,\r\n  search: false\r\n};\r\n\r\nexport default function postApp(state = initialState, action) {\r\n  switch(action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      }\r\n    case FIND_POST:\r\n      const searchText = action.value.trim();\r\n      const searchedPost = state.listPosts.filter(post => {\r\n        return post.title.includes(searchText) || post.body.includes(searchText);\r\n       });\r\n      return {\r\n        ...state,\r\n        search: true,\r\n        searchedPosts: searchedPost\r\n      }\r\n    case DISPLAY:\r\n      const [posts, users, comments] = action.data\r\n      return {\r\n        ...state,\r\n        listPosts: posts.map(post => {\r\n          return {\r\n            ...post,\r\n            user: users.find(user => user.id === post.userId)\r\n          };\r\n        }),\r\n        commentList: [...comments]\r\n      };\r\n    case REMOVE_POST:\r\n      return {\r\n        ...state,\r\n        listPosts: state.listPosts.filter(post => post.id !== action.id)\r\n      }\r\n    case REMOVE_COMMENT: \r\n      return {\r\n        ...state,\r\n        commentList: state.commentList.filter(comment => comment.id !== action.id)\r\n      }\r\n    default:\r\n      return state;\r\n  };\r\n}","import React from 'react';\r\nimport './user.css';\r\n\r\nexport default function User(props) {\r\n  return (\r\n    <section className=\"user\">\r\n      <h1>Author: {props.user.name}</h1>\r\n      <ul>\r\n        <li>email: {props.user.email}</li>\r\n        <li>\r\n        <span className=\"addressHead\">Address Information</span>\r\n          <ul className=\"address\">\r\n            <li>city: {props.user.address.city}</li>\r\n            <li>street: {props.user.address.street} </li>\r\n            <li>suite: {props.user.address.suite}</li>\r\n            <li>zipcode: {props.user.address.zipcode}</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './comment.css';\r\n\r\nexport default function Comment(props) {\r\n  return (\r\n    <div className=\"comment\">\r\n      <span className=\"remove\" onClick={() => props.removeComment(props.comment.id)}>&times;</span>\r\n      <h2>{props.comment.name}</h2>\r\n      <p>{props.comment.email}</p>\r\n      <p>{props.comment.body}</p>\r\n    </div>\r\n  )\r\n}\r\n","import {connect} from 'react-redux';\r\nimport CommentList from './CommentList.js';\r\nimport { removeCommentAction } from '../../redux/action';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    comments: ownProps.commentList,\r\n  }\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    removeComment: (id) => dispatch(removeCommentAction(id))\r\n  }\r\n}\r\n\r\nconst CommentListHandler = connect(mapStateToProps, mapDispatchToProps)(CommentList);\r\n\r\nexport default CommentListHandler;","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default function CommentList(props) {\r\n  return (\r\n    <section className=\"commentList\">\r\n      <h1>Comments</h1>\r\n      {props.comments.map(comment => {\r\n        return <Comment removeComment={props.removeComment} key={comment.id} comment={comment}/>\r\n      })}\r\n    </section>\r\n  )\r\n}\r\n","import {connect} from 'react-redux';\r\nimport Post from './Post';\r\nimport { removeAction } from '../../redux/action';\r\n\r\nfunction mapPropsToState(state, ownProps) {\r\n  return {\r\n    post: ownProps.post,\r\n    commentList: ownProps.commentList\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    remove: (id) => dispatch(removeAction(id))\r\n  }\r\n};\r\n\r\nconst PostHandler = connect(mapPropsToState, mapDispatchToProps)(Post);\r\nexport default PostHandler;","import React from 'react';\r\nimport User from '../userComponent/User';\r\nimport './post.css';\r\nimport CommentListHandler from '../commensComponent/CommentListHandler';\r\n\r\nexport default function Post(props) {\r\n  return (\r\n      <article>\r\n        <section className=\"bodyPost\">\r\n          <h1 className=\"titlePost\">{props.post.title}</h1>\r\n          <p className=\"textPost\">{props.post.body}</p>\r\n        </section>\r\n        <User user={props.post.user}/>\r\n        <span className=\"remove\" onClick={() => props.remove(props.post.id)}>&times;</span>\r\n        <CommentListHandler commentList={props.commentList}/>\r\n      </article>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport PostHandler from './postComponent/PostHandler';\r\n\r\nexport default class postList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchItem = this.searchItem.bind(this);\r\n  };\r\n  searchItem(e) {\r\n      this.props.searchItem(e.target.value);\r\n  };\r\n  render() {\r\n    if (!this.props.requested) {\r\n      return (\r\n        <button className=\"load\" onClick={this.props.load}>Load</button>\r\n      );\r\n    } else if (this.props.requested && this.props.posts !== null) {\r\n        if (!this.props.search) { \r\n          return (\r\n            <div className=\"posts\">\r\n\r\n              <input \r\n                className=\"searchItem\" \r\n                onKeyDown={(e) => this.searchItem(e)} type=\"text\"\r\n                placeholder=\"Search\"\r\n              />\r\n\r\n                {this.props.posts.map(post => {\r\n                  const comments = this.props.comments.filter(comment => comment.postId === post.id)\r\n                  return <PostHandler commentList={comments} key={post.id} post={post}/>\r\n                })}\r\n            </div>\r\n          )\r\n        } else {\r\n          return (\r\n            <div className=\"posts\">\r\n               <input \r\n                className=\"searchItem\" \r\n                onKeyDown={(e) => this.searchItem(e)} type=\"text\"\r\n                placeholder=\"Search\"\r\n              />\r\n              {this.props.searchedPost.map(post => {\r\n                const comments = this.props.comments.filter(comment => comment.postId === post.id)\r\n                return <PostHandler commentList={comments} key={post.id} post={post}/>\r\n              })}\r\n            </div>\r\n          )\r\n        }\r\n    } else {\r\n      return (\r\n        <div className=\"loading\">loading</div>\r\n      );\r\n    };\r\n  };\r\n};\r\n","import {connect} from 'react-redux';\r\nimport PostList from './PostList';\r\nimport {loadAction, findAction} from '../redux/action';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    requested: state.requested,\r\n    posts: state.listPosts,\r\n    search: state.search,\r\n    searchedPost: state.searchedPosts,\r\n    comments: state.commentList\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: () => dispatch(loadAction()),\r\n    searchItem: (value) => dispatch(findAction(value))\r\n  };\r\n}\r\n\r\nconst PostListHandler = connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n\r\nexport default PostListHandler;","import React from 'react';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from \"redux-thunk\"\r\nimport postApp from './redux/reducer';\r\nimport './App.css'\r\nimport PostListHandler from './components/PostListHandler'\r\n\r\nfunction App() {\r\n  const store = createStore(postApp, applyMiddleware(thunk))\r\n  return (\r\n    <Provider store={store}>\r\n      <PostListHandler/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}