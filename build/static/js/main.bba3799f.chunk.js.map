{"version":3,"sources":["redux/postsReducer.js","User.js","Comment.js","CommentList.js","Post.js","PostList.js","api.js","redux/changeVisibleContent.js","redux/loadingReducer.js","App.js","redux/store.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","filter","post","id","idPost","map","Object","objectSpread2","comments","comment","idComment","connect","state","deletePost","_ref","name","email","city","react_default","a","createElement","Fragment","className","href","onClick","deleteComment","key","body","CommentsList","item","src_Comment","Post","title","src_User","CommentList","PostList","filteredPost","console","log","src_Post","user","address","API_URL","changeVisibleContent","visibleContent","loadingReducer","loadingButton","loadPosts","dispatch","_ref2","postsList","usersList","commentsList","allList","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","concat","then","responce","json","sent","slicedToArray","find","userId","str","postId","stop","_useState","useState","_useState2","valueInput","setValue","_useState3","_useState4","disabledButton","changeDisabledButton","value","onChange","event","target","src_PostList","input","searchInText","trim","toLowerCase","includes","filterPost","disabled","rootReduce","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bba3799f.chunk.js","sourcesContent":["const ACTION_TYPE_SET_POSTS = 'SET_POSTS';\nconst ACTION_TYPE_DELETE_POST = 'DELETE_POST';\nconst ACTION_TYPE_DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = posts => ({\n  type: ACTION_TYPE_SET_POSTS,\n  posts,\n});\n\nexport const deletePost = idPost => ({\n  type: ACTION_TYPE_DELETE_POST,\n  idPost,\n});\n\nexport const deleteComment = idComment => ({\n  type: ACTION_TYPE_DELETE_COMMENT,\n  idComment,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_POSTS:\n      return action.posts;\n    case ACTION_TYPE_DELETE_POST:\n      return posts.filter(post => post.id !== action.idPost);\n    case ACTION_TYPE_DELETE_COMMENT:\n      return posts.map(post => ({\n        ...post,\n        comments: post.comments\n          .filter(comment => comment.id !== action.idComment),\n      }));\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deletePost } from './redux/postsReducer';\n\nconst User = ({ name, email, city, idPost, deletePost }) => (\n  <>\n    <div className=\"userInfo\">\n      {' Name: '}\n      <span className=\"userInfo__name\">\n        {name}\n      </span>\n      <span className=\"userInfo__email\">\n        {' Email: '}\n        <a href=\" \">\n          {email}\n        </a>\n      </span>\n      <span className=\"userInfo__adress\">\n        {' Sity: '}\n        <a href=\" \">\n          {city}\n        </a>\n      </span>\n    </div>\n    <button\n      type=\"button\"\n      className=\"button-delete\"\n      onClick={() => deletePost(idPost)}\n    >\n      Delete post\n    </button>\n  </>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  idPost: PropTypes.number.isRequired,\n};\n\nconst makeStateToProps = state => ({\n  state: state.posts,\n});\n\nexport default connect(\n  makeStateToProps,\n  { deletePost }\n)(User);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from './redux/postsReducer';\n\nconst Comment = ({ comment, deleteComment }) => (\n  <li key={comment.id}>\n    <h3 className=\"comment__name\">\n      {comment.name}\n    </h3>\n    <button\n      type=\"button\"\n      className=\"button-delete\"\n      onClick={() => deleteComment(comment.id)}\n    >\n      Delete comment\n    </button>\n    <p className=\"comment__body\">\n      {comment.body}\n    </p>\n    <div className=\"comment__sender\">\n      {'Sender: '}\n      <a href=\" \">\n        {comment.email}\n      </a>\n    </div>\n  </li>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    userId: PropTypes,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nconst makeStateToProps = state => ({\n  posts: state.posts,\n})\n\nexport default connect(\n  makeStateToProps,\n  { deleteComment }\n)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentsList = ({ comments }) => (\n  <>\n    {comments.length > 0 ? (\n      <>\n        <h2 className=\"comment__title\">\n          Comments:\n        </h2>\n        <ol type=\"1\">\n          {comments.map(item => (\n            <Comment\n              comment={item}\n            />\n          ))}\n        </ol>\n      </>\n    ) : (\n      <h3>No comments for this post</h3>\n    )\n    }\n  </>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentsList from './CommentList';\n\nconst Post = ({ title, body, name, email, city, idPost, comments }) => (\n  <div className=\"post\" key={idPost}>\n    <h2 className=\"post__title\">\n      {title}\n    </h2>\n    <p className=\"post__body\">\n      {`\"`}\n      {body}\n      {`\"`}\n    </p>\n    <User\n      name={name}\n      email={email}\n      city={city}\n      idPost={idPost}\n    />\n    <hr className=\"line\" />\n    <CommentsList comments={comments} />\n  </div>\n);\n\nPost.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  idPost: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ filteredPost }) => (\n  <section className=\"postList\">\n    {console.log(filteredPost)}\n    {filteredPost.length ? filteredPost.map(item => (\n      <>\n        <Post\n          title={item.title}\n          body={item.body}\n          name={item.user.name}\n          email={item.user.email}\n          city={item.user.address.city}\n          idPost={item.id}\n          comments={item.comments}\n        />\n      </>\n    )) : (<h3 className=\"postList__not-found\">Post not found...</h3>)\n    }\n\n  </section>\n);\n\nPostList.propTypes = {\n  filteredPost: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PostList;\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getPosts = () => fetch(`${API_URL}posts`)\n  .then(responce => responce.json());\n\nexport const getUsers = () => fetch(`${API_URL}users`)\n  .then(responce => responce.json());\n\nexport const getComments = () => fetch(`${API_URL}comments`)\n  .then(responce => responce.json());\n","const ACTION_TYPE_CHANGE_CONTENT = 'CHANGE_CONTENT';\n\nexport const changeContent = () => ({\n  type: ACTION_TYPE_CHANGE_CONTENT,\n});\n\nconst changeVisibleContent = (visibleContent = false, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_CHANGE_CONTENT:\n      return true;\n\n    default:\n      return visibleContent;\n  }\n};\n\nexport default changeVisibleContent;\n","import { getPosts, getUsers, getComments } from '../api';\nimport { setPosts } from './postsReducer';\nimport { changeContent } from './changeVisibleContent';\n\nconst ACTION_TYPE_START_LOADING = 'START_LOAADING';\n\nexport const startLoading = () => ({\n  type: ACTION_TYPE_START_LOADING,\n});\n\nexport const loadPosts = () => async(dispatch) => {\n  dispatch(startLoading());\n\n  const [postsList, usersList, commentsList] = await\n  Promise.all([getPosts(), getUsers(), getComments()]);\n\n  const allList = postsList.map(post => ({\n    ...post,\n    user: usersList.find(user => user.id === post.userId),\n    comments: commentsList.filter(str => str.postId === post.id),\n  }));\n\n  dispatch(setPosts(allList));\n  dispatch(changeContent());\n};\n\nconst loadingReducer = (loadingButton = 'Load list of posts', action) => {\n  switch (action.type) {\n    case ACTION_TYPE_START_LOADING:\n      return 'Loading...';\n\n    default:\n      return loadingButton;\n  }\n};\n\nexport default loadingReducer;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport PostList from './PostList';\nimport { loadPosts } from './redux/loadingReducer';\n\nfunction App({ posts, loadingButton, visibleContent, loadPosts }) {\n  const [valueInput, setValue] = useState('');\n  const [disabledButton, changeDisabledButton] = useState(false);\n\n  const setInputUsers = (event) => {\n    setValue(event.target.value);\n  };\n\n  const filterPost = (input) => {\n    const searchInText = input.trim().toLowerCase();\n\n    if (input.length === 0) {\n      return posts;\n    }\n\n    return posts.filter((post) => {\n      if ((post.body + post.title).toLowerCase().includes(searchInText)) {\n        return post;\n      }\n\n      return false;\n    });\n  };\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"title\">Dynamic list of posts</h1>\n      {!visibleContent ? (\n        <button\n          disabled={disabledButton}\n          type=\"button\"\n          onClick={() => {\n            changeDisabledButton(true);\n            loadPosts();\n          }\n          }\n          className=\"loadButton\"\n        >\n          {loadingButton}\n        </button>\n      ) : (\n        <>\n          <div className=\"input\">\n            <h2 className=\"input__title\">Search post: </h2>\n            <input\n              type=\"text\"\n              className=\"input__searсh\"\n              value={valueInput}\n              onChange={setInputUsers}\n            />\n          </div>\n          <PostList\n            filteredPost={filterPost(valueInput)}\n          />\n        </>\n      )\n      }\n    </div>\n  );\n}\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadingButton: PropTypes.string.isRequired,\n  visibleContent: PropTypes.bool.isRequired,\n  loadPosts: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  loadingButton: state.loadingButton,\n  visibleContent: state.visibleContent,\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    loadPosts,\n  }\n)(App);\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport postsReducer from './postsReducer';\nimport loadingReducer from './loadingReducer';\nimport changeVisibleContent from './changeVisibleContent';\n\nconst rootReduce = combineReducers({\n  posts: postsReducer,\n  loadingButton: loadingReducer,\n  visibleContent: changeVisibleContent,\n});\n\nconst store = createStore(rootReduce, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}