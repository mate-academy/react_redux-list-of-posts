{"version":3,"sources":["store/index.js","components/User/User.js","components/Comment/Comment.js","components/Comment/CommentHandle.js","components/CommentList/CommentList.js","components/Post/Post.js","components/Post/PostHandle.js","components/PostList/PostList.js","components/PostList/PostListHandle.js","App.js","AppConnect.js","index.js"],"names":["ACTION_TYPES","ADD_POSTS","SWITCH_LOADING","IS_INITIALIZED","HAS_ERROR","IS_SORT","ADD_SORTED_POSTS","DELETE_POST","ADD_TEXT","POSTS_SORT","RESET_FILTER","DELETE_COMMENT","switchLoading","isLoading","type","payload","errorPosts","hasError","receivePosts","dispatch","isInitialized","Promise","all","fetch","then","_ref","_ref2","Object","slicedToArray","responsePosts","responseUsers","responseComments","json","_ref3","_ref4","posts","users","comments","usersMapApi","reduce","acum","user","_objectSpread","defineProperty","id","getFullPosts","postsArg","commentsArg","usersMapApiArg","map","post","filter","comment","postId","userId","postsSorted","preparedPosts","sortedPosts","addPosts","catch","initialState","isSorted","templateForFilter","store","createStore","state","arguments","length","undefined","action","toConsumableArray","title","includes","body","idPost","applyMiddleware","thunk","User","name","email","react_default","a","createElement","concat","address","city","street","suite","Comment","deleteComment","className","onClick","EnhancedComment","connect","idComment","CommentList","CommentHandle","key","Post","deletePost","User_User","CommentList_CommentList","EnhancedPost","PostList","PostHandle","EnhancedPostList","App","_this$props","this","props","addTextForFilter","sortPosts","resetFilter","Fragment","onSubmit","event","onChange","target","value","PostListHandle","React","Component","EnhancedApp","text","preventDefault","ReactDOM","render","es","AppConnect","document","getElementById"],"mappings":"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","file":"static/js/main.3c4ca234.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst ACTION_TYPES = {\n  ADD_POSTS: 'POSTS::ADD',\n  SWITCH_LOADING: 'LOADING::SWITCH',\n  IS_INITIALIZED: 'INITIALIZED::IS',\n  HAS_ERROR: 'ERROR::HAS',\n  IS_SORT: 'IS::SORT',\n  ADD_SORTED_POSTS: 'SORTED_POSTS::ADD',\n  DELETE_POST: 'POST::DELETE',\n  ADD_TEXT: 'TEXT::ADD',\n  POSTS_SORT: 'POST::SORT',\n  RESET_FILTER: 'RESET::FILTER',\n  DELETE_COMMENT: 'DELETE::COMMENT',\n};\n\nexport const deletePost = idPost => ({\n  type: ACTION_TYPES.DELETE_POST,\n  payload: idPost,\n});\n\nexport const deleteComment = (idComment, idPost) => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  payload: idComment,\n  idPost,\n});\n\nexport const addPosts = posts => ({\n  type: ACTION_TYPES.ADD_POSTS,\n  payload: posts,\n});\n\nexport const resetFilter = () => ({\n  type: ACTION_TYPES.RESET_FILTER,\n});\n\nexport const addTextForFilter = text => ({\n  type: ACTION_TYPES.ADD_TEXT,\n  payload: text,\n});\n\nexport const sortPosts = (eventSubmit) => {\n  eventSubmit.preventDefault();\n\n  return {\n    type: ACTION_TYPES.POSTS_SORT,\n  };\n};\n\nexport const addSortedPosts = postsSorted => ({\n  type: ACTION_TYPES.ADD_SORTED_POSTS,\n  payload: postsSorted,\n});\n\nexport const switchLoading = isLoading => ({\n  type: ACTION_TYPES.SWITCH_LOADING,\n  payload: isLoading,\n});\n\nexport const initialized = isInitialized => ({\n  type: ACTION_TYPES.IS_INITIALIZED,\n  payload: isInitialized,\n});\n\nexport const errorPosts = hasError => ({\n  type: ACTION_TYPES.HAS_ERROR,\n  payload: hasError,\n});\n\nexport const receivePosts = () => (dispatch) => {\n  dispatch(switchLoading(true));\n  dispatch(initialized(true));\n  dispatch(errorPosts(false));\n\n  Promise.all([\n    fetch('https://jsonplaceholder.typicode.com/posts'),\n    fetch('https://jsonplaceholder.typicode.com/users'),\n    fetch('https://jsonplaceholder.typicode.com/comments'),\n  ])\n    .then(([responsePosts, responseUsers, responseComments]) => Promise\n      .all([\n        responsePosts.json(),\n        responseUsers.json(),\n        responseComments.json(),\n      ]))\n    .then(([posts, users, comments]) => {\n      const usersMapApi = users\n        .reduce((acum, user) => ({ ...acum, [user.id]: user }), {});\n\n      function getFullPosts(postsArg, commentsArg, usersMapApiArg) {\n        return postsArg.map(post => ({\n          ...post,\n          comments: commentsArg.filter(comment => comment.postId === post.id),\n          user: usersMapApiArg[post.userId],\n        }));\n      }\n\n      const preparedPosts = getFullPosts(posts, comments, usersMapApi);\n      const sortedPosts = getFullPosts(posts, comments, usersMapApi);\n\n      dispatch(switchLoading(false));\n      dispatch(addPosts(preparedPosts));\n      dispatch(addSortedPosts(sortedPosts));\n    })\n    .catch(() => {\n      dispatch(errorPosts(true));\n      dispatch(switchLoading(false));\n    });\n};\n\nconst initialState = {\n  posts: [],\n  postsSorted: [],\n  isLoading: false,\n  isInitialized: false,\n  hasError: false,\n  isSorted: false,\n  templateForFilter: '',\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_POSTS: {\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n    }\n\n    case ACTION_TYPES.POSTS_SORT: {\n      return {\n        ...state,\n        postsSorted: state.posts\n          .filter(post => post.title.includes(state.templateForFilter)\n        || post.body.includes(state.templateForFilter)),\n        templateForFilter: '',\n      };\n    }\n\n    case ACTION_TYPES.RESET_FILTER: {\n      return {\n        ...state,\n        postsSorted: [...state.posts],\n      };\n    }\n\n    case ACTION_TYPES.ADD_TEXT: {\n      return {\n        ...state,\n        templateForFilter: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.DELETE_POST: {\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n        postsSorted: state.postsSorted\n          .filter(post => post.id !== action.payload),\n      };\n    }\n\n    case ACTION_TYPES.DELETE_COMMENT: {\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post.id === action.idPost) {\n            return {\n              ...post,\n              comments: post.comments\n                .filter(comment => comment.id !== action.payload),\n            };\n          }\n\n          return post;\n        }),\n        postsSorted: state.postsSorted.map((post) => {\n          if (post.id === action.idPost) {\n            return {\n              ...post,\n              comments: post.comments\n                .filter(comment => comment.id !== action.payload),\n            };\n          }\n\n          return post;\n        }),\n      };\n    }\n\n    case ACTION_TYPES.ADD_SORTED_POSTS: {\n      return {\n        ...state,\n        postsSorted: [...action.payload],\n      };\n    }\n\n    case ACTION_TYPES.SWITCH_LOADING: {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.IS_INITIALIZED: {\n      return {\n        ...state,\n        isInitialized: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.HAS_ERROR: {\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.IS_SORT: {\n      return {\n        ...state,\n        isSorted: !state.isSorted,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const { name, email } = user;\n\n  return (\n    <div>\n      <div>{name}</div>\n      <div>{email}</div>\n      <div>\n        {`\n          ${user.address.city},\n          ${user.address.street},\n          ${user.address.suite}\n        `}\n      </div>\n    </div>\n  );\n}\n\nconst shape = PropTypes.shape({\n  city: PropTypes.string,\n  street: PropTypes.string,\n  suite: PropTypes.string,\n});\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: shape.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './Comment.css';\n\nfunction Comment({ comment, deleteComment }) {\n  const { name, email, body } = comment;\n\n  return (\n    <div>\n      <div className=\"comment__comm\">{body}</div>\n      <div className=\"border\">\n        <p className=\"comment__text-comm\">{name}</p>\n        <p className=\"comment__text-comm\">\n          {email}\n        </p>\n      </div>\n\n      <button\n        type=\"button\"\n        onClick={() => deleteComment(comment.id, comment.postId)}\n      >\n        Remove comment\n      </button>\n    </div>\n  );\n}\n\nComment.propTypes = {\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    body: PropTypes.string,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    postId: PropTypes.number,\n  }).isRequired,\n};\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport Comment from './Comment';\nimport { deleteComment } from '../../store/index';\n\nconst mapDispatchYoProps = dispatch => ({\n  deleteComment: (idComment, idPost) => dispatch(deleteComment(idComment, idPost)),\n});\n\nconst EnhancedComment = connect(\n  null,\n  mapDispatchYoProps,\n)(Comment);\n\nexport default EnhancedComment;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport CommentHandle from '../Comment/CommentHandle';\n\nfunction CommentList({ comments }) {\n  return (\n    <div>\n      {comments\n        .map(comment => (<CommentHandle comment={comment} key={comment.id} />))\n      }\n    </div>\n  );\n}\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\n\nimport './Post.css';\n\nfunction Post({ post, deletePost }) {\n  const { title, body, comments } = post;\n\n  return (\n    <div>\n      <div className=\"post\">\n        <h2 className=\"post__title\">{title}</h2>\n        <p className=\"post__text\">{body}</p>\n        <User user={post.user} />\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => deletePost(post.id)}\n      >\n        Remove post\n      </button>\n      <CommentList comments={comments} />\n    </div>\n  );\n}\n\nconst shapeAddress = PropTypes.shape({\n  city: PropTypes.string,\n  street: PropTypes.string,\n  suite: PropTypes.string,\n});\n\nconst shapePost = PropTypes.shape({\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: shapeAddress.isRequired,\n});\n\nPost.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    user: PropTypes.string,\n    id: PropTypes.string,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(),\n    post: shapePost,\n  }).isRequired,\n};\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport { deletePost } from '../../store/index';\n\nconst mapDispatchYoProps = dispatch => ({\n  deletePost: id => dispatch(deletePost(id)),\n});\n\nconst EnhancedPost = connect(\n  null,\n  mapDispatchYoProps,\n)(Post);\n\nexport default EnhancedPost;\n","import React from 'react';\nimport PostHandle from '../Post/PostHandle';\n\nfunction PostList({ postsSorted }) {\n  return (\n    postsSorted.map(post => (\n      <PostHandle post={post} key={post.id} />\n    ))\n  );\n}\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport PostList from './PostList';\n\nconst EnhancedPostList = connect(\n  state => ({\n    postsSorted: state.postsSorted,\n    isSorted: state.isSorted,\n  }),\n)(PostList);\n\nexport default EnhancedPostList;\n","import React from 'react';\nimport EnhancedPostList from './components/PostList/PostListHandle';\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {};\n\n  render() {\n    const {\n      receivePosts,\n      isLoading,\n      hasError,\n      isInitialized,\n      addTextForFilter,\n      templateForFilter,\n      sortPosts,\n      resetFilter,\n    } = this.props;\n\n    if (isLoading) {\n      return <p className=\"loading\">Loading...</p>;\n    }\n\n    if (hasError) {\n      return (\n        <>\n          <h1 className=\"app__title\">You want to upload again.</h1>\n          <button\n            type=\"button\"\n            className=\"btn btn-warning load load-again\"\n            onClick={receivePosts}\n          >\n            Load again\n          </button>\n        </>\n      );\n    }\n\n    if (!isInitialized) {\n      return (\n        <>\n          <h1 className=\"app__title\">Want to upload a list of posts?</h1>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary load\"\n            onClick={receivePosts}\n          >\n            Load\n          </button>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__title\">Static list of posts</h1>\n        <form onSubmit={event => sortPosts(event)}>\n          <input\n            onChange={event => addTextForFilter(event.target.value)}\n            value={templateForFilter}\n            type=\"text\"\n            className=\"text-template\"\n          />\n        </form>\n        <button\n          onClick={resetFilter}\n          type=\"button\"\n          className=\"button_reset btn btn-primary load\"\n        >\n          Reset\n        </button>\n        <EnhancedPostList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport {\n  receivePosts, addTextForFilter, sortPosts, resetFilter,\n} from './store/index';\n\nconst mapDispatchToProps = dispatch => ({\n  receivePosts: () => dispatch(receivePosts()),\n  addTextForFilter: event => dispatch(addTextForFilter(event)),\n  sortPosts: event => dispatch(sortPosts(event)),\n  resetFilter: () => dispatch(resetFilter()),\n});\n\nconst EnhancedApp = connect(\n  state => ({\n    isLoading: state.isLoading,\n    isInitialized: state.isInitialized,\n    hasError: state.hasError,\n    templateForFilter: state.templateForFilter,\n  }),\n  mapDispatchToProps,\n)(App);\n\nexport default EnhancedApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport EnhancedApp from './AppConnect';\n\nReactDOM.render((\n  <Provider store={store}>\n    <EnhancedApp />\n  </Provider>\n), document.getElementById('root'));\n"],"sourceRoot":""}